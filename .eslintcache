[{"D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\index.js":"1","D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\App.js":"2","D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\reportWebVitals.js":"3","D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\reusable\\CustomCamera.js":"4","D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\reusable\\Stats.js":"5","D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\reusable\\OrbitControls.js":"6","D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\libs\\THREEx.FullScreen.js":"7","D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\libs\\THREEx.windowresize.js":"8","D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\reusable\\DatGuiContext.js":"9","D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\reusable\\MathUtils.js":"10","D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\pages\\basic-examples\\solid-materials.js":"11","D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\pages\\basic-examples\\color-explorer.js":"12","D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\pages\\basic-examples\\hello-world.js":"13","D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\pages\\basic-examples\\wireframe.js":"14","D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\pages\\basic-examples\\helpers.js":"15","D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\pages\\basic-examples\\outline.js":"16","D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\pages\\basic-examples\\dashed-lines.js":"17","D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\pages\\basic-examples\\shapes.js":"18","D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\pages\\basic-examples\\extrusion.js":"19","D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\pages\\basic-examples\\vertex-colors.js":"20","D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\pages\\basic-examples\\text-3d.js":"21","D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\pages\\textures\\textures.js":"22","D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\pages\\textures\\textures-repeat.js":"23","D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\pages\\textures\\texture-text-3d.js":"24","D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\pages\\textures\\translucence.js":"25","D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\pages\\textures\\shadow.js":"26","D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\pages\\textures\\skybox.js":"27","D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\pages\\textures\\reflection.js":"28","D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\pages\\textures\\refraction.js":"29","D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\pages\\textures\\bubble.js":"30"},{"size":500,"mtime":499162500000,"results":"31","hashOfConfig":"32"},{"size":3207,"mtime":1615843106706,"results":"33","hashOfConfig":"32"},{"size":362,"mtime":499162500000,"results":"34","hashOfConfig":"32"},{"size":630,"mtime":1615313126003,"results":"35","hashOfConfig":"32"},{"size":513,"mtime":1615312928761,"results":"36","hashOfConfig":"32"},{"size":605,"mtime":1615313822829,"results":"37","hashOfConfig":"32"},{"size":3257,"mtime":1612387128778,"results":"38","hashOfConfig":"32"},{"size":1535,"mtime":1612909549917,"results":"39","hashOfConfig":"32"},{"size":81,"mtime":1612730468929,"results":"40","hashOfConfig":"32"},{"size":134,"mtime":1614551716088,"results":"41","hashOfConfig":"32"},{"size":3743,"mtime":1615308483802,"results":"42","hashOfConfig":"32"},{"size":7547,"mtime":1615490975714,"results":"43","hashOfConfig":"32"},{"size":2623,"mtime":1615490978316,"results":"44","hashOfConfig":"32"},{"size":3313,"mtime":1615490980490,"results":"45","hashOfConfig":"32"},{"size":2943,"mtime":1615490978747,"results":"46","hashOfConfig":"32"},{"size":2685,"mtime":1615490979147,"results":"47","hashOfConfig":"32"},{"size":3102,"mtime":1615490977114,"results":"48","hashOfConfig":"32"},{"size":7408,"mtime":1615490979468,"results":"49","hashOfConfig":"32"},{"size":4004,"mtime":1615490977796,"results":"50","hashOfConfig":"32"},{"size":7061,"mtime":1615490980148,"results":"51","hashOfConfig":"32"},{"size":3644,"mtime":1615490979847,"results":"52","hashOfConfig":"32"},{"size":5656,"mtime":1615490981268,"results":"53","hashOfConfig":"32"},{"size":4939,"mtime":1615490980987,"results":"54","hashOfConfig":"32"},{"size":4136,"mtime":1615490980729,"results":"55","hashOfConfig":"32"},{"size":5517,"mtime":1615490981649,"results":"56","hashOfConfig":"32"},{"size":4716,"mtime":1615494167059,"results":"57","hashOfConfig":"32"},{"size":3812,"mtime":1615578591201,"results":"58","hashOfConfig":"32"},{"size":5706,"mtime":1615582069727,"results":"59","hashOfConfig":"32"},{"size":5659,"mtime":1615667129674,"results":"60","hashOfConfig":"32"},{"size":5773,"mtime":1615843619357,"results":"61","hashOfConfig":"32"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},"rqskcl",{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"64"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"78","usedDeprecatedRules":"64"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"64"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"64"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"64"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"64"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"64"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"64"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"64"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"64"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"64"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"64"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"64"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"64"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"135","messages":"136","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\index.js",[],["137","138"],"D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\App.js",[],"D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\reportWebVitals.js",[],"D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\reusable\\CustomCamera.js",["139"],"import React, { useEffect } from 'react';\r\nimport {PerspectiveCamera} from 'three';\r\nimport { useThree } from 'react-three-fiber';\r\n\r\nconst extent = 10;\r\nconst MyCamera = ({near=0.1, far=1000, OnCameraInit}) => {\r\n    const { setDefaultCamera, size } = useThree();\r\n    useEffect(() => {\r\n        const cam = new PerspectiveCamera(70, size.width / size.height, near, far);\r\n        cam.position.z = 2 * extent;\r\n        // cam.up.set(0, 0, 1);\r\n        setDefaultCamera(cam);\r\n\r\n        OnCameraInit(cam);\r\n    },[size, setDefaultCamera, near, far]);\r\n\r\n    return (\r\n        <group></group>\r\n    );\r\n}\r\n\r\nexport default MyCamera;","D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\reusable\\Stats.js",[],"D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\reusable\\OrbitControls.js",[],"D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\libs\\THREEx.FullScreen.js",["140","141"],"// This THREEx helper makes it easy to handle the fullscreen API\r\n// * it hides the prefix for each browser\r\n// * it hides the little discrepencies of the various vendor API\r\n// * at the time of this writing (nov 2011) it is available in \r\n//   [firefox nightly](http://blog.pearce.org.nz/2011/11/firefoxs-html-full-screen-api-enabled.html),\r\n//   [webkit nightly](http://peter.sh/2011/01/javascript-full-screen-api-navigation-timing-and-repeating-css-gradients/) and\r\n//   [chrome stable](http://updates.html5rocks.com/2011/10/Let-Your-Content-Do-the-Talking-Fullscreen-API).\r\n\r\n// # Code\r\n\r\n/** @namespace */\r\nvar THREEx\t\t= THREEx \t\t|| {};\r\nTHREEx.FullScreen\t= THREEx.FullScreen\t|| {};\r\n\r\n/**\r\n * test if it is possible to have fullscreen\r\n * \r\n * @returns {Boolean} true if fullscreen API is available, false otherwise\r\n*/\r\nTHREEx.FullScreen.available\t= function()\r\n{\r\n\treturn this._hasWebkitFullScreen || this._hasMozFullScreen;\r\n}\r\n\r\n/**\r\n * test if fullscreen is currently activated\r\n * \r\n * @returns {Boolean} true if fullscreen is currently activated, false otherwise\r\n*/\r\nTHREEx.FullScreen.activated\t= function()\r\n{\r\n\tif( this._hasWebkitFullScreen ){\r\n\t\treturn document.webkitIsFullScreen;\r\n\t}else if( this._hasMozFullScreen ){\r\n\t\treturn document.mozFullScreen;\r\n\t}else{\r\n\t\tconsole.assert(false);\r\n\t}\r\n}\r\n\r\n/**\r\n * Request fullscreen on a given element\r\n * @param {DomElement} element to make fullscreen. optional. default to document.body\r\n*/\r\nTHREEx.FullScreen.request\t= function(element)\r\n{\r\n\telement\t= element\t|| document.body;\r\n\tif( this._hasWebkitFullScreen ){\r\n\t\telement.webkitRequestFullScreen(Element.ALLOW_KEYBOARD_INPUT);\r\n\t}else if( this._hasMozFullScreen ){\r\n\t\telement.mozRequestFullScreen();\r\n\t}else{\r\n\t\tconsole.assert(false);\r\n\t}\r\n}\r\n\r\n/**\r\n * Cancel fullscreen\r\n*/\r\nTHREEx.FullScreen.cancel\t= function()\r\n{\r\n\tif( this._hasWebkitFullScreen ){\r\n\t\tdocument.webkitCancelFullScreen();\r\n\t}else if( this._hasMozFullScreen ){\r\n\t\tdocument.mozCancelFullScreen();\r\n\t}else{\r\n\t\tconsole.assert(false);\r\n\t}\r\n}\r\n\r\n// internal functions to know which fullscreen API implementation is available\r\nTHREEx.FullScreen._hasWebkitFullScreen\t= 'webkitCancelFullScreen' in document\t? true : false;\t\r\nTHREEx.FullScreen._hasMozFullScreen\t= 'mozCancelFullScreen' in document\t? true : false;\t\r\n\r\n/**\r\n * Bind a key to renderer screenshot\r\n * usage: THREEx.FullScreen.bindKey({ charCode : 'a'.charCodeAt(0) }); \r\n*/\r\nTHREEx.FullScreen.bindKey\t= function(opts){\r\n\topts\t\t= opts\t\t|| {};\r\n\tvar charCode\t= opts.charCode\t|| 'f'.charCodeAt(0);\r\n\tvar dblclick\t= opts.dblclick !== undefined ? opts.dblclick : false;\r\n\tvar element\t= opts.element\r\n\r\n\tvar toggle\t= function(){\r\n\t\tif( THREEx.FullScreen.activated() ){\r\n\t\t\tTHREEx.FullScreen.cancel();\r\n\t\t}else{\r\n\t\t\tTHREEx.FullScreen.request(element);\r\n\t\t}\t\t\r\n\t}\r\n\r\n\tvar onKeyPress\t= function(event){\r\n\t\tif( event.which !== charCode )\treturn;\r\n\t\ttoggle();\r\n\t}.bind(this);\r\n\r\n\tdocument.addEventListener('keypress', onKeyPress, false);\r\n\r\n\tdblclick && document.addEventListener('dblclick', toggle, false);\r\n\r\n\treturn {\r\n\t\tunbind\t: function(){\r\n\t\t\tdocument.removeEventListener('keypress', onKeyPress, false);\r\n\t\t\tdblclick && document.removeEventListener('dblclick', toggle, false);\r\n\t\t}\r\n\t};\r\n}\r\n\r\nexport default THREEx.FullScreen;","D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\libs\\THREEx.windowresize.js",["142"],"// This THREEx helper makes it easy to handle window resize.\r\n// It will update renderer and camera when window is resized.\r\n//\r\n// # Usage\r\n//\r\n// **Step 1**: Start updating renderer and camera\r\n//\r\n// ```var windowResize = new THREEx.WindowResize(aRenderer, aCamera)```\r\n//    \r\n// **Step 2**: stop updating renderer and camera\r\n//\r\n// ```windowResize.destroy()```\r\n// # Code\r\n\r\n//\r\n\r\n/** @namespace */\r\nvar THREEx\t= THREEx || {}\r\n\r\n/**\r\n * Update renderer and camera when the window is resized\r\n * \r\n * @param {Object} renderer the renderer to update\r\n * @param {Object} Camera the camera to update\r\n * @param {Function} dimension callback for renderer size\r\n*/\r\nTHREEx.WindowResize\t= function(renderer, camera, dimension){\r\n\tdimension \t= dimension || function(){ return { width: window.innerWidth, height: window.innerHeight } }\r\n\tvar callback\t= function(){\r\n\t\t// fetch target renderer size\r\n\t\tvar rendererSize = dimension();\r\n\t\t// notify the renderer of the size change\r\n\t\trenderer.setSize( rendererSize.width, rendererSize.height )\r\n\t\t// update the camera\r\n\t\tcamera.aspect\t= rendererSize.width / rendererSize.height\r\n\t\tcamera.updateProjectionMatrix()\r\n\t}\r\n\t// bind the resize event\r\n\twindow.addEventListener('resize', callback, false)\r\n\t// return .stop() the function to stop watching window resize\r\n\treturn {\r\n\t\ttrigger\t: function(){\r\n\t\t\tcallback()\r\n\t\t},\r\n\t\t/**\r\n\t\t * Stop watching window resize\r\n\t\t*/\r\n\t\tdestroy\t: function(){\r\n\t\t\twindow.removeEventListener('resize', callback)\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default THREEx.WindowResize;","D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\reusable\\DatGuiContext.js",[],"D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\reusable\\MathUtils.js",[],"D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\pages\\basic-examples\\solid-materials.js",[],"D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\pages\\basic-examples\\color-explorer.js",[],"D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\pages\\basic-examples\\hello-world.js",["143"],"import React, { Suspense } from 'react';\r\nimport { Canvas, useLoader, useThree } from 'react-three-fiber';\r\nimport * as THREE from 'three';\r\n\r\nimport MyCamera from '../../reusable/CustomCamera';\r\nimport Stats from '../../reusable/Stats';\r\nimport OrbitControls from '../../reusable/OrbitControls';\r\n\r\nimport { DoubleSide, TextureLoader, RepeatWrapping, BackSide, FogExp2 } from \"three\";\r\n\r\nimport floorTex from '../../assets/textures/checkerboard.jpg';\r\n\r\nfunction CameraWrapper(props) {\r\n  const { scene } = useThree();\r\n\r\n  const OnCameraInit = (cam) => {\r\n    cam.position.set(0, 150, 400);\r\n    cam.lookAt(scene.position);\r\n\r\n    scene.fog = new FogExp2(0x9999ff, 0.00025);\r\n  };\r\n\r\n  return (\r\n    <MyCamera OnCameraInit={OnCameraInit} fov={45} near={0.01} far={20000}></MyCamera>\r\n  );\r\n}\r\n\r\nfunction Geometry() {\r\n  const floorTexture = useLoader(TextureLoader, floorTex);\r\n  floorTexture.wrapS = floorTexture.wrapT = RepeatWrapping;\r\n  floorTexture.repeat.set(10, 10);\r\n  return (\r\n    <group>\r\n      <mesh position={[100, 50, -50]}>\r\n        <sphereGeometry attach=\"geometry\" args={[50, 32, 16]} />\r\n        <meshLambertMaterial attach=\"material\" args={{ color: 0x8888ff }}></meshLambertMaterial>\r\n      </mesh>\r\n      <mesh position={[-100, 50, -50]}>\r\n        <boxGeometry attach=\"geometry\" args={[100, 100, 100, 1, 1, 1]}></boxGeometry>\r\n        <meshLambertMaterial attach=\"material\" args={{ color: 0x8888ff }}></meshLambertMaterial>\r\n      </mesh>\r\n\r\n      {/* Floor */}\r\n      <mesh position={[0, -0.5, 0]} rotation={[-Math.PI / 2, 0, 0]}>\r\n        <planeGeometry attach=\"geometry\" args={[1000, 1000, 1, 1]}></planeGeometry>\r\n        <meshBasicMaterial attach=\"material\" map={floorTexture} args={{ side: DoubleSide }}></meshBasicMaterial>\r\n      </mesh>\r\n\r\n      {/* Sky */}\r\n      <mesh>\r\n        <boxGeometry attach=\"geometry\" args={[10000, 10000, 10000]}></boxGeometry>\r\n        <meshBasicMaterial args={{color:0x9990ff, side: BackSide}}></meshBasicMaterial>\r\n      </mesh>\r\n\r\n      <axesHelper args={[100]}></axesHelper>\r\n    </group>\r\n  )\r\n}\r\n\r\nfunction Lights() {\r\n  return (\r\n    <group>\r\n      <pointLight position={[0, 250, 0]} args={[0xffffff]}></pointLight>\r\n      <ambientLight args={[0x111111]}></ambientLight>\r\n    </group>\r\n  );\r\n}\r\n\r\n\r\nfunction HelloWorldPage(props) {\r\n\r\n  return (\r\n    <div className=\"wrapper\">\r\n      <Canvas>\r\n        <CameraWrapper />\r\n        <OrbitControls />\r\n        <Lights></Lights>\r\n        <Suspense fallback={null}>\r\n          <Geometry></Geometry>\r\n        </Suspense>\r\n        <Stats />\r\n      </Canvas>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default HelloWorldPage;\r\n","D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\pages\\basic-examples\\wireframe.js",[],"D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\pages\\basic-examples\\helpers.js",["144","145","146","147"],"import React, { Suspense, useEffect, useMemo, useRef } from 'react';\r\nimport * as THREE from 'three';\r\nimport { Canvas, useThree } from 'react-three-fiber';\r\n\r\nimport MyCamera from '../../reusable/CustomCamera';\r\nimport Stats from '../../reusable/Stats';\r\nimport OrbitControls from '../../reusable/OrbitControls';\r\n\r\nimport { BackSide, FogExp2 } from \"three\";\r\n\r\nfunction CameraWrapper() {\r\n    const { scene } = useThree();\r\n\r\n    const OnCameraInit = (cam) => {\r\n        cam.position.set(0, 150, 400);\r\n        cam.lookAt(scene.position);\r\n\r\n        scene.fog = new FogExp2(0x9999ff, 0.00025);\r\n    };\r\n\r\n    return (\r\n        <MyCamera OnCameraInit={OnCameraInit} fov={45} near={0.01} far={20000}></MyCamera>\r\n    );\r\n}\r\n\r\nfunction Geometry() {\r\n    let [origin, terminus, direction] = useMemo(()=>{\r\n        let origin = new THREE.Vector3(50, 100, 50);\r\n        let terminus = new THREE.Vector3(75, 75, 75);\r\n        let direction = new THREE.Vector3().subVectors(terminus, origin).normalize();\r\n        return [origin, terminus, direction];\r\n    })\r\n    return (\r\n        <group>\r\n            <mesh position={[40, 40, 40]}>\r\n                <sphereGeometry args={[30, 32, 16]}></sphereGeometry>\r\n                <meshLambertMaterial color={0x000088}></meshLambertMaterial>\r\n            </mesh>\r\n\r\n            <axesHelper args={[50]} position={[40, 40, 40]}>\r\n            </axesHelper>\r\n\r\n            <gridHelper args={[200, 10, new THREE.Color(0x006600), new THREE.Color(0x006600)]} position={[100, 0, 100]}></gridHelper>\r\n            <gridHelper args={[200, 10, new THREE.Color(0x000066), new THREE.Color(0x000066)]} position={[100, 100, 0]} rotation={[Math.PI/2, 0, 0]}></gridHelper>\r\n            <gridHelper args={[200, 10, new THREE.Color(0x660000), new THREE.Color(0x660000)]} position={[0, 100, 100]} rotation={[0, 0, Math.PI/2]}></gridHelper>\r\n\r\n            <arrowHelper args={[direction, origin, 50, 0x884400]}></arrowHelper>\r\n\r\n\r\n            {/* Sky */}\r\n            <mesh>\r\n                <boxGeometry attach=\"geometry\" args={[10000, 10000, 10000]}></boxGeometry>\r\n                <meshBasicMaterial args={{ color: 0x9990ff, side: BackSide }}></meshBasicMaterial>\r\n            </mesh>\r\n\r\n            <axesHelper args={[100]}></axesHelper>\r\n        </group>\r\n    )\r\n}\r\n\r\nfunction Lights() {\r\n    return (\r\n        <group>\r\n            <pointLight position={[0, 250, 0]} args={[0xffffff]}></pointLight>\r\n            <ambientLight args={[0x111111]}></ambientLight>\r\n        </group>\r\n    );\r\n}\r\n\r\nfunction HelpersPage(props) {\r\n\r\n    return (\r\n        <div className=\"wrapper\">\r\n            <Canvas>\r\n                <CameraWrapper />\r\n                <OrbitControls />\r\n                <Lights></Lights>\r\n                <Suspense fallback={null}>\r\n                    <Geometry></Geometry>\r\n                </Suspense>\r\n                <Stats />\r\n            </Canvas>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default HelpersPage;\r\n","D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\pages\\basic-examples\\outline.js",["148","149","150"],"import React, { Suspense, useEffect, useMemo, useRef } from 'react';\r\nimport * as THREE from 'three';\r\nimport { Canvas, useThree } from 'react-three-fiber';\r\n\r\nimport MyCamera from '../../reusable/CustomCamera';\r\nimport Stats from '../../reusable/Stats';\r\nimport OrbitControls from '../../reusable/OrbitControls';\r\n\r\nimport { BackSide, FogExp2 } from \"three\";\r\n\r\nfunction CameraWrapper() {\r\n    const { scene } = useThree();\r\n\r\n    const OnCameraInit = (cam) => {\r\n        cam.position.set(0, 150, 400);\r\n        cam.lookAt(scene.position);\r\n\r\n        scene.fog = new FogExp2(0x9999ff, 0.00025);\r\n    };\r\n\r\n    return (\r\n        <MyCamera OnCameraInit={OnCameraInit} fov={45} near={0.01} far={20000}></MyCamera>\r\n    );\r\n}\r\n\r\nfunction Geometry() {\r\n\r\n    return (\r\n        <group>\r\n            <mesh position={[-60, 55, 0]}>\r\n                <sphereGeometry args={[50, 32, 16]}></sphereGeometry>\r\n                <meshNormalMaterial></meshNormalMaterial>\r\n            </mesh>\r\n\r\n            <mesh position={[-60, 55, 0]} scale={[1.05, 1.05, 1.05]}>\r\n                <sphereGeometry args={[50, 32, 16]}></sphereGeometry>\r\n                <meshBasicMaterial color={0xff0000} side={THREE.BackSide}></meshBasicMaterial>\r\n            </mesh>\r\n\r\n            <mesh position={[60, 60, 0]}>\r\n                <boxGeometry args={[80, 80, 80]}></boxGeometry>\r\n                <meshNormalMaterial></meshNormalMaterial>\r\n            </mesh>\r\n\r\n            <mesh position={[60, 60, 0]} scale={[1.05, 1.05, 1.05]}>\r\n                <boxGeometry args={[80, 80, 80]}></boxGeometry>\r\n                <meshBasicMaterial color={0x00ff00} side={THREE.BackSide}></meshBasicMaterial>\r\n            </mesh>\r\n\r\n\r\n            {/* Sky */}\r\n            <mesh>\r\n                <boxGeometry attach=\"geometry\" args={[10000, 10000, 10000]}></boxGeometry>\r\n                <meshBasicMaterial args={{ color: 0x9990ff, side: BackSide }}></meshBasicMaterial>\r\n            </mesh>\r\n\r\n            <axesHelper args={[100]}></axesHelper>\r\n        </group>\r\n    )\r\n}\r\n\r\nfunction Lights() {\r\n    return (\r\n        <group>\r\n            <pointLight position={[0, 250, 0]} args={[0xffffff]}></pointLight>\r\n            <ambientLight args={[0x111111]}></ambientLight>\r\n        </group>\r\n    );\r\n}\r\n\r\nfunction OutlinePage(props) {\r\n\r\n    return (\r\n        <div className=\"wrapper\">\r\n            <Canvas>\r\n                <CameraWrapper />\r\n                <OrbitControls />\r\n                <Lights></Lights>\r\n                <Suspense fallback={null}>\r\n                    <Geometry></Geometry>\r\n                </Suspense>\r\n                <Stats />\r\n            </Canvas>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default OutlinePage;\r\n","D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\pages\\basic-examples\\dashed-lines.js",["151"],"import React, { Suspense, useEffect, useMemo, useRef } from 'react';\r\nimport * as THREE from 'three';\r\nimport { Canvas, useThree } from 'react-three-fiber';\r\n\r\nimport MyCamera from '../../reusable/CustomCamera';\r\nimport Stats from '../../reusable/Stats';\r\nimport OrbitControls from '../../reusable/OrbitControls';\r\n\r\nimport { BackSide, FogExp2 } from \"three\";\r\n\r\nfunction CameraWrapper() {\r\n    const { scene } = useThree();\r\n\r\n    const OnCameraInit = (cam) => {\r\n        cam.position.set(0, 150, 400);\r\n        cam.lookAt(scene.position);\r\n\r\n        scene.fog = new FogExp2(0x9999ff, 0.00025);\r\n    };\r\n\r\n    return (\r\n        <MyCamera OnCameraInit={OnCameraInit} fov={45} near={0.01} far={20000}></MyCamera>\r\n    );\r\n}\r\n\r\nfunction Geometry() {\r\n    let lineRef = useRef();\r\n    let lineRef2 = useRef();\r\n\r\n    useEffect(() => {\r\n        lineRef.current.computeLineDistances();\r\n        lineRef2.current.computeLineDistances();\r\n    }, [lineRef, lineRef2]);\r\n\r\n    let [lineGeometry, lineMat, dashedLineGeometry, dashedLineMat] = useMemo(() => {\r\n        //Simple Line\r\n        let lineGeometry = new THREE.BufferGeometry();\r\n        const points = [\r\n            new THREE.Vector3(-150, -100, 0),\r\n            new THREE.Vector3(-150, 100, 0)\r\n        ];\r\n        lineGeometry.setFromPoints(points);\r\n\r\n        const lineMat = new THREE.LineBasicMaterial({ color: 0xcc0000 });\r\n\r\n        //Dotted Line\r\n        let dashedLineGeometry = new THREE.BufferGeometry();\r\n        const dashedLinePoints = [\r\n            new THREE.Vector3(-100, -100, 0),\r\n            new THREE.Vector3(-100, 100, 0)\r\n        ];\r\n        dashedLineGeometry.setFromPoints(dashedLinePoints);\r\n\r\n        const dashedLineMat = new THREE.LineDashedMaterial({ color: 0x00cc00, dashSize: 4, gapSize: 2, linewidth: 4 });\r\n\r\n        return [lineGeometry, lineMat, dashedLineGeometry, dashedLineMat];\r\n    });\r\n\r\n    return (\r\n        <group>\r\n            <line ref={lineRef} geometry={lineGeometry} material={lineMat}></line>\r\n            <line ref={lineRef2} geometry={dashedLineGeometry} material={dashedLineMat}></line>\r\n\r\n            {/* Sky */}\r\n            <mesh>\r\n                <boxGeometry attach=\"geometry\" args={[10000, 10000, 10000]}></boxGeometry>\r\n                <meshBasicMaterial args={{ color: 0x9990ff, side: BackSide }}></meshBasicMaterial>\r\n            </mesh>\r\n\r\n            <axesHelper args={[100]}></axesHelper>\r\n        </group>\r\n    )\r\n}\r\n\r\nfunction Lights() {\r\n    return (\r\n        <group>\r\n            <pointLight position={[0, 250, 0]} args={[0xffffff]}></pointLight>\r\n            <ambientLight args={[0x111111]}></ambientLight>\r\n        </group>\r\n    );\r\n}\r\n\r\nfunction DashedLinesPage(props) {\r\n\r\n    return (\r\n        <div className=\"wrapper\">\r\n            <Canvas>\r\n                <CameraWrapper />\r\n                <OrbitControls />\r\n                <Lights></Lights>\r\n                <Suspense fallback={null}>\r\n                    <Geometry></Geometry>\r\n                </Suspense>\r\n                <Stats />\r\n            </Canvas>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DashedLinesPage;\r\n","D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\pages\\basic-examples\\shapes.js",[],"D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\pages\\basic-examples\\extrusion.js",["152","153"],"import React, { Suspense, useEffect, useRef } from 'react';\r\nimport { Canvas, useLoader, useThree } from 'react-three-fiber';\r\nimport * as THREE from 'three';\r\nimport { SceneUtils } from 'three/examples/jsm/utils/SceneUtils';\r\n\r\nimport MyCamera from '../../reusable/CustomCamera';\r\nimport Stats from '../../reusable/Stats';\r\nimport OrbitControls from '../../reusable/OrbitControls';\r\n\r\nimport { DoubleSide, TextureLoader, RepeatWrapping, BackSide, FogExp2 } from \"three\";\r\n\r\nimport floorTex from '../../assets/textures/checkerboard.jpg';\r\n\r\nfunction CameraWrapper(props) {\r\n  const { scene } = useThree();\r\n\r\n  const OnCameraInit = (cam) => {\r\n    cam.position.set(0, 150, 400);\r\n    cam.lookAt(scene.position);\r\n\r\n    scene.fog = new FogExp2(0x9999ff, 0.00025);\r\n  };\r\n\r\n  return (\r\n    <MyCamera OnCameraInit={OnCameraInit} fov={45} near={0.01} far={20000}></MyCamera>\r\n  );\r\n}\r\n\r\nfunction Star() {\r\n\r\n  let groupParent = useRef();\r\n\r\n  //For some reason face doesn't have different material to extrusion\r\n  let extrusionSettings = {\r\n    size: 30, height: 4, curveSegments: 3,\r\n    bevelThickness: 1, bevelSize: 2, bevelEnabled: false,\r\n    material: 0, extrudeMaterial: 1\r\n  };\r\n\r\n  var starPoints = [];\r\n\r\n  starPoints.push(new THREE.Vector2(0, 50));\r\n  starPoints.push(new THREE.Vector2(10, 10));\r\n  starPoints.push(new THREE.Vector2(40, 10));\r\n  starPoints.push(new THREE.Vector2(20, -10));\r\n  starPoints.push(new THREE.Vector2(30, -50));\r\n  starPoints.push(new THREE.Vector2(0, -20));\r\n  starPoints.push(new THREE.Vector2(-30, -50));\r\n  starPoints.push(new THREE.Vector2(-20, -10));\r\n  starPoints.push(new THREE.Vector2(-40, 10));\r\n  starPoints.push(new THREE.Vector2(-10, 10));\r\n\r\n  let starShape = new THREE.Shape(starPoints);\r\n  \r\n  const materialFront = new THREE.MeshBasicMaterial({ color: 0xffff00 });\r\n  const materialSide = new THREE.MeshBasicMaterial({ color: 0xff8800 });\r\n\r\n  let multiMaterial = new THREE.MeshFaceMaterial([materialFront, materialSide]);\r\n\r\n  useEffect(() => {\r\n    var starShapeGeometry = new THREE.Mesh(\r\n      new THREE.ExtrudeGeometry(starShape, extrusionSettings),\r\n      multiMaterial\r\n    );\r\n    starShapeGeometry.position.set(0, 50, 0);\r\n    groupParent.current.add(starShapeGeometry);\r\n  }, [groupParent, starShape, extrusionSettings])\r\n\r\n  return (\r\n    <group ref={groupParent}>\r\n      <mesh position={[0, 50, 0]}>\r\n        <extrudeGeometry attach=\"geometry\" args={[starShape, extrusionSettings]}></extrudeGeometry>\r\n        <meshBasicMaterial args={{ color: 0x000000, wireframe: true, transparent: true }}></meshBasicMaterial>\r\n      </mesh>\r\n    </group>\r\n  )\r\n}\r\n\r\nfunction Geometry() {\r\n  const floorTexture = useLoader(TextureLoader, floorTex);\r\n  floorTexture.wrapS = floorTexture.wrapT = RepeatWrapping;\r\n  floorTexture.repeat.set(10, 10);\r\n  return (\r\n    <group>\r\n      <Star></Star>\r\n\r\n      {/* Floor */}\r\n      <mesh position={[0, -0.5, 0]} rotation={[-Math.PI / 2, 0, 0]}>\r\n        <planeGeometry attach=\"geometry\" args={[1000, 1000, 1, 1]}></planeGeometry>\r\n        <meshBasicMaterial attach=\"material\" map={floorTexture} args={{ side: DoubleSide }}></meshBasicMaterial>\r\n      </mesh>\r\n\r\n      {/* Sky */}\r\n      <mesh>\r\n        <boxGeometry attach=\"geometry\" args={[10000, 10000, 10000]}></boxGeometry>\r\n        <meshBasicMaterial args={{ color: 0x9990ff, side: BackSide }}></meshBasicMaterial>\r\n      </mesh>\r\n\r\n      <axesHelper args={[100]}></axesHelper>\r\n    </group>\r\n  )\r\n}\r\n\r\nfunction Lights() {\r\n  return (\r\n    <group>\r\n      <pointLight position={[0, 250, 0]} args={[0xffffff]}></pointLight>\r\n      <ambientLight args={[0x111111]}></ambientLight>\r\n    </group>\r\n  );\r\n}\r\n\r\n\r\nfunction ExtrusionPage(props) {\r\n\r\n  return (\r\n    <div className=\"wrapper\">\r\n      <Canvas>\r\n        <CameraWrapper />\r\n        <OrbitControls />\r\n        <Lights></Lights>\r\n        <Suspense fallback={null}>\r\n          <Geometry></Geometry>\r\n        </Suspense>\r\n        <Stats />\r\n      </Canvas>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ExtrusionPage;\r\n","D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\pages\\basic-examples\\vertex-colors.js",["154","155"],"import React, { Suspense, useMemo, useState } from 'react';\r\nimport * as THREE from 'three';\r\nimport { Canvas, useThree, useLoader } from 'react-three-fiber';\r\n\r\nimport MathUtils from '../../reusable/MathUtils';\r\n\r\nimport MyCamera from '../../reusable/CustomCamera';\r\nimport Stats from '../../reusable/Stats';\r\nimport OrbitControls from '../../reusable/OrbitControls';\r\n\r\nimport floorTex from '../../assets/textures/checkerboard.jpg';\r\n\r\nimport { BackSide, FogExp2 } from \"three\";\r\n\r\nfunction CameraWrapper() {\r\n    const { scene } = useThree();\r\n\r\n    const OnCameraInit = (cam) => {\r\n        cam.position.set(0, 150, 400);\r\n        cam.lookAt(scene.position);\r\n\r\n        scene.fog = new FogExp2(0x9999ff, 0.00025);\r\n    };\r\n\r\n    return (\r\n        <MyCamera OnCameraInit={OnCameraInit} fov={45} near={0.01} far={20000}></MyCamera>\r\n    );\r\n}\r\n\r\n//This replaces Face color, as I wasn't really able to find an actual replacement for it, so I used vertex color instead. \r\n//I guess Faces used this behind the scenes anyway\r\nfunction NonIndexedFaceColors(props) {\r\n    let [boxGeometry] = useMemo(() => {\r\n        //If it is indexed, the vertices indexes are re-used between triangles.\r\n        //We'll use it like this so we can give different colors to each triangle\r\n        let boxGeometry = new THREE.BoxBufferGeometry(80, 80, 80, props.nrOfFaces, props.nrOfFaces, props.nrOfFaces).toNonIndexed();\r\n\r\n        let colors = [];\r\n        const totalTriangles = props.nrOfFaces * props.nrOfFaces * 2 * 6;\r\n        for (let i = 0; i < totalTriangles; i++) {\r\n            let r = Math.random() * 255;\r\n            let g = Math.random() * 255;\r\n            let b = Math.random() * 255;\r\n            //For each vertex in triangle\r\n            for (let j = 0; j < 3; j++) {\r\n                colors.push(r);\r\n                colors.push(g);\r\n                colors.push(b);\r\n            }\r\n        }\r\n\r\n        let colorsArr = new Uint8Array(colors);\r\n\r\n        boxGeometry.setAttribute('color', new THREE.BufferAttribute(colorsArr, 3, true));\r\n        boxGeometry.attributes.color.needsUpdate = true;\r\n\r\n        return [boxGeometry];\r\n    }, [props.nrOfFaces]);\r\n\r\n    return (\r\n        <group>\r\n            { boxGeometry !== undefined && <mesh geometry={boxGeometry} position={[-100, 50, 0]}>\r\n                <meshBasicMaterial vertexColors={THREE.VertexColors}></meshBasicMaterial>\r\n            </mesh>}\r\n        </group>\r\n    )\r\n}\r\n\r\nfunction NonIndexedVertexColors(props) {\r\n    let { scene } = useThree();\r\n\r\n    let [boxGeometry] = useMemo(() => {\r\n        //If it is indexed, the vertices indexes are re-used between triangles.\r\n        //We'll use it like this so we can give different colors to each triangle\r\n        let boxGeometry = new THREE.BoxBufferGeometry(80, 80, 80, props.nrOfFaces, props.nrOfFaces, props.nrOfFaces).toNonIndexed();\r\n\r\n        let colors = [];\r\n        const totalTriangles = props.nrOfFaces * props.nrOfFaces * 2 * 6;\r\n        for (let i = 0; i < totalTriangles * 3; i++) {\r\n            let r = Math.random() * 255;\r\n            let g = Math.random() * 255;\r\n            let b = Math.random() * 255;\r\n            colors.push(r);\r\n            colors.push(g);\r\n            colors.push(b);\r\n        }\r\n\r\n        let colorsArr = new Uint8Array(colors);\r\n\r\n        boxGeometry.setAttribute('color', new THREE.BufferAttribute(colorsArr, 3, true));\r\n        boxGeometry.attributes.color.needsUpdate = true;\r\n\r\n        return [boxGeometry];\r\n    }, [props.nrOfFaces, scene]);\r\n\r\n    return (\r\n        <group>\r\n            { boxGeometry !== undefined && <mesh geometry={boxGeometry} position={[0, 50, 0]}>\r\n                <meshBasicMaterial vertexColors={THREE.VertexColors}></meshBasicMaterial>\r\n            </mesh>}\r\n        </group>\r\n    )\r\n}\r\n\r\nfunction RGBColorCube() {\r\n    let { scene } = useThree();\r\n\r\n    let [boxGeometry] = useMemo(() => {\r\n        let size = 80;\r\n        let boxGeometry = new THREE.BoxBufferGeometry(size, size, size, 1, 1, 1);\r\n        let colors = [];\r\n\r\n        console.log(\"geo\", boxGeometry);\r\n        //24 since vertices are reused / indexed now\r\n        for (let i = 0; i < 24*3; i+=3) {\r\n            const x = boxGeometry.getAttribute(\"position\").array[i];\r\n            const y = boxGeometry.getAttribute(\"position\").array[i+1];\r\n            const z = boxGeometry.getAttribute(\"position\").array[i+2];\r\n            colors.push(MathUtils.Clamp(125 + x * 255.0 / size, 0, 255));\r\n            colors.push(MathUtils.Clamp(125 + y * 255.0 / size, 0, 255));\r\n            colors.push(MathUtils.Clamp(125 + z * 255.0 / size, 0, 255));\r\n            console.log(\"x\", x);\r\n            console.log(\"xx\", 125 + x * 255.0 / size);\r\n        }\r\n\r\n        let colorsArr = new Uint8Array(colors);\r\n\r\n        boxGeometry.setAttribute('color', new THREE.BufferAttribute(colorsArr, 3, true));\r\n        boxGeometry.attributes.color.needsUpdate = true;\r\n\r\n        return [boxGeometry];\r\n    }, [scene]);\r\n\r\n    return (\r\n        <group>\r\n            { boxGeometry !== undefined && <mesh geometry={boxGeometry} position={[100, 50, 0]}>\r\n                <meshBasicMaterial vertexColors={THREE.VertexColors}></meshBasicMaterial>\r\n            </mesh>}\r\n        </group>\r\n    )\r\n}\r\n\r\nfunction Geometry() {\r\n    const floorTexture = useLoader(THREE.TextureLoader, floorTex);\r\n    floorTexture.wrapS = floorTexture.wrapT = THREE.RepeatWrapping;\r\n    floorTexture.repeat.set(10, 10);\r\n\r\n    let [nrOfFaces] = useState(3);\r\n\r\n    return (\r\n        <group>\r\n            <NonIndexedFaceColors nrOfFaces={nrOfFaces}></NonIndexedFaceColors>\r\n            <NonIndexedVertexColors nrOfFaces={nrOfFaces}></NonIndexedVertexColors>\r\n            <RGBColorCube></RGBColorCube>\r\n\r\n            {/* Floor */}\r\n            {/* <mesh position={[0, -0.5, 0]} rotation={[-Math.PI / 2, 0, 0]}>\r\n                <planeGeometry attach=\"geometry\" args={[1000, 1000, 1, 1]}></planeGeometry>\r\n                <meshBasicMaterial attach=\"material\" map={floorTexture} args={{ side: THREE.DoubleSide }}></meshBasicMaterial>\r\n            </mesh> */}\r\n\r\n            {/* Sky */}\r\n            <mesh>\r\n                <boxGeometry attach=\"geometry\" args={[10000, 10000, 10000]}></boxGeometry>\r\n                <meshBasicMaterial args={{ color: 0x9990ff, side: BackSide }}></meshBasicMaterial>\r\n            </mesh>\r\n\r\n            <axesHelper args={[100]}></axesHelper>\r\n        </group>\r\n    )\r\n}\r\n\r\nfunction Lights() {\r\n    return (\r\n        <group>\r\n            <pointLight position={[0, 250, 0]} args={[0xffffff]}></pointLight>\r\n            <ambientLight args={[0x111111]}></ambientLight>\r\n        </group>\r\n    );\r\n}\r\n\r\nfunction VertexColorsPage(props) {\r\n\r\n    return (\r\n        <div className=\"wrapper\">\r\n            <Canvas>\r\n                <CameraWrapper />\r\n                <OrbitControls />\r\n                <Lights></Lights>\r\n                <Suspense fallback={null}>\r\n                    <Geometry></Geometry>\r\n                </Suspense>\r\n                <Stats />\r\n            </Canvas>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default VertexColorsPage;\r\n","D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\pages\\basic-examples\\text-3d.js",["156","157","158","159"],"import React, { Suspense, useEffect, useMemo, useRef, useState } from 'react';\r\nimport { Canvas, useLoader, useThree } from 'react-three-fiber';\r\nimport * as THREE from 'three';\r\nimport MyCamera from '../../reusable/CustomCamera';\r\nimport Stats from '../../reusable/Stats';\r\nimport OrbitControls from '../../reusable/OrbitControls';\r\n\r\n//Assets\r\nimport floorTex from '../../assets/textures/checkerboard.jpg';\r\nimport roboto from '../../assets/fonts/Roboto Black_Regular.json';\r\n\r\nfunction CameraWrapper(props) {\r\n    const { scene } = useThree();\r\n\r\n    const OnCameraInit = (cam) => {\r\n        cam.position.set(0, 150, 400);\r\n        cam.lookAt(scene.position);\r\n\r\n        scene.fog = new THREE.FogExp2(0x9999ff, 0.00025);\r\n    };\r\n\r\n    return (\r\n        <MyCamera OnCameraInit={OnCameraInit} fov={45} near={0.01} far={20000}></MyCamera>\r\n    );\r\n}\r\n\r\nfunction Geometry() {\r\n    const floorTexture = useLoader(THREE.TextureLoader, floorTex);\r\n    floorTexture.wrapS = floorTexture.wrapT = THREE.RepeatWrapping;\r\n    floorTexture.repeat.set(10, 10);\r\n\r\n    let textGeom = useRef();\r\n    let textWidth = 25;\r\n\r\n    const font = new THREE.Font(roboto);\r\n    let textSettings = useMemo(() => ({\r\n        font,\r\n        size: 30, height: 4, curveSegments: 3,\r\n        style: \"normal\",\r\n        bevelThickness: 1, bevelSize: 2, bevelEnabled: true,\r\n        material: 0, extrudeMaterial: 1\r\n    }), [font]);\r\n\r\n    \r\n    useEffect(()=>{\r\n        if(textGeom.current === null){\r\n            textWidth = 25;\r\n            return;\r\n        }\r\n        textGeom.current.computeBoundingBox();\r\n        console.log(\"bb\", textGeom.current.boundingBox);\r\n        textWidth = textGeom.current.boundingBox.max.x - textGeom.current.boundingBox.min.x;\r\n    }, [textGeom]);\r\n\r\n    let textMat = useMemo(()=>{\r\n        let multiMat = [\r\n            new THREE.MeshBasicMaterial({color:0xaa0000}),\r\n            new THREE.MeshBasicMaterial({color:0x0000aa}),\r\n        ];\r\n        return new THREE.MeshFaceMaterial(multiMat);\r\n    })\r\n\r\n    return (\r\n        <group>\r\n            <mesh position={[-0.5 * textWidth, 50, 100]} rotation={[-Math.PI/4, 0, 0]} material={textMat}>\r\n                <textGeometry attach=\"geometry\" ref={textGeom} args={[\"Hello World!\", textSettings]}></textGeometry>\r\n            </mesh>\r\n\r\n            {/* Floor */}\r\n            <mesh position={[0, -0.5, 0]} rotation={[-Math.PI / 2, 0, 0]}>\r\n                <planeGeometry attach=\"geometry\" args={[1000, 1000, 1, 1]}></planeGeometry>\r\n                <meshBasicMaterial attach=\"material\" map={floorTexture} args={{ side: THREE.DoubleSide }}></meshBasicMaterial>\r\n            </mesh>\r\n\r\n            {/* Sky */}\r\n            <mesh>\r\n                <boxGeometry attach=\"geometry\" args={[10000, 10000, 10000]}></boxGeometry>\r\n                <meshBasicMaterial args={{ color: 0x9990ff, side: THREE.BackSide }}></meshBasicMaterial>\r\n            </mesh>\r\n\r\n            <axesHelper args={[100]}></axesHelper>\r\n        </group>\r\n    )\r\n}\r\n\r\nfunction Lights() {\r\n    return (\r\n        <group>\r\n            <pointLight position={[0, 250, 0]} args={[0xffffff]}></pointLight>\r\n            <ambientLight args={[0x111111]}></ambientLight>\r\n        </group>\r\n    );\r\n}\r\n\r\n\r\nfunction Text3DPage(props) {\r\n\r\n    return (\r\n        <div className=\"wrapper\">\r\n            <Canvas>\r\n                <CameraWrapper />\r\n                <OrbitControls />\r\n                <Lights></Lights>\r\n                <Suspense fallback={null}>\r\n                    <Geometry></Geometry>\r\n                </Suspense>\r\n                <Stats />\r\n            </Canvas>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Text3DPage;\r\n","D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\pages\\textures\\textures.js",["160","161"],"import React, { Suspense, useEffect, useRef, useMemo } from 'react';\r\nimport { Canvas, useLoader, useThree } from 'react-three-fiber';\r\nimport * as THREE from 'three';\r\nimport MyCamera from '../../reusable/CustomCamera';\r\nimport Stats from '../../reusable/Stats';\r\nimport OrbitControls from '../../reusable/OrbitControls';\r\nimport { SceneUtils } from 'three/examples/jsm/utils/SceneUtils';\r\n\r\n//Assets\r\nimport floorTex from '../../assets/textures/checkerboard.jpg';\r\nimport moonTex from '../../assets/textures/moon.jpg';\r\nimport crateTex from '../../assets/textures/crate.png';\r\n\r\nimport dice1Tex from '../../assets/textures/Dice-Blue-1.png';\r\nimport dice2Tex from '../../assets/textures/Dice-Blue-2.png';\r\nimport dice3Tex from '../../assets/textures/Dice-Blue-3.png';\r\nimport dice4Tex from '../../assets/textures/Dice-Blue-4.png';\r\nimport dice5Tex from '../../assets/textures/Dice-Blue-5.png';\r\nimport dice6Tex from '../../assets/textures/Dice-Blue-6.png';\r\n\r\nfunction CameraWrapper(props) {\r\n    const { scene } = useThree();\r\n\r\n    const OnCameraInit = (cam) => {\r\n        cam.position.set(0, 150, 400);\r\n        cam.lookAt(scene.position);\r\n\r\n        scene.fog = new THREE.FogExp2(0x9999ff, 0.00025);\r\n    };\r\n\r\n    return (\r\n        <MyCamera OnCameraInit={OnCameraInit} fov={45} near={0.01} far={20000}></MyCamera>\r\n    );\r\n}\r\n\r\nfunction Geometry() {\r\n    let groupParent = useRef();\r\n    const floorTexture = useLoader(THREE.TextureLoader, floorTex);\r\n    floorTexture.wrapS = floorTexture.wrapT = THREE.RepeatWrapping;\r\n    floorTexture.repeat.set(10, 10);\r\n\r\n    const moonTexture = useLoader(THREE.TextureLoader, moonTex);\r\n    const crateTexture = useLoader(THREE.TextureLoader, crateTex);\r\n\r\n    const dice1Texture = useLoader(THREE.TextureLoader, dice1Tex);\r\n    const dice2Texture = useLoader(THREE.TextureLoader, dice2Tex);\r\n    const dice3Texture = useLoader(THREE.TextureLoader, dice3Tex);\r\n    const dice4Texture = useLoader(THREE.TextureLoader, dice4Tex);\r\n    const dice5Texture = useLoader(THREE.TextureLoader, dice5Tex);\r\n    const dice6Texture = useLoader(THREE.TextureLoader, dice6Tex);\r\n\r\n    let diceFaceMaterial = useMemo(() => {\r\n        const multiMaterial = [\r\n            new THREE.MeshLambertMaterial({ map: dice1Texture }),\r\n            new THREE.MeshLambertMaterial({ map: dice2Texture }),\r\n            new THREE.MeshLambertMaterial({ map: dice3Texture }),\r\n            new THREE.MeshLambertMaterial({ map: dice4Texture }),\r\n            new THREE.MeshLambertMaterial({ map: dice5Texture }),\r\n            new THREE.MeshLambertMaterial({ map: dice6Texture })\r\n        ];\r\n\r\n             return new THREE.MeshFaceMaterial(multiMaterial)\r\n\r\n    }, [dice1Texture, dice2Texture, dice3Texture, dice4Texture, dice5Texture, dice6Texture]);\r\n\r\n    return (\r\n        <group ref={groupParent}>\r\n            <mesh position={[-100, 50, 0]}>\r\n                <sphereGeometry attach=\"geometry\" args={[40, 32, 16]}></sphereGeometry>\r\n                <meshBasicMaterial attach=\"material\" map={moonTexture}></meshBasicMaterial>\r\n            </mesh>\r\n\r\n            <mesh position={[0, 50, 0]}>\r\n                <sphereGeometry attach=\"geometry\" args={[40, 32, 16]}></sphereGeometry>\r\n                <meshLambertMaterial attach=\"material\" map={moonTexture}></meshLambertMaterial>\r\n            </mesh>\r\n\r\n            <mesh position={[100, 50, 0]}>\r\n                <sphereGeometry attach=\"geometry\" args={[40, 32, 16]}></sphereGeometry>\r\n                <meshLambertMaterial attach=\"material\" map={moonTexture} color={0xff8800} ambientLight={0x0000ff}></meshLambertMaterial>\r\n            </mesh>\r\n\r\n            <mesh position={[-60, 60, -100]}>\r\n                <boxGeometry attach=\"geometry\" args={[85, 85, 85]}></boxGeometry>\r\n                <meshBasicMaterial map={crateTexture}></meshBasicMaterial>\r\n            </mesh>\r\n\r\n            <mesh position={[60, 50, -100]} material={diceFaceMaterial}>\r\n                <boxGeometry attach=\"geometry\" args={[85, 85, 85]}></boxGeometry>\r\n            </mesh>\r\n\r\n            {/* Lightbulb */}\r\n            <mesh position={[0, 150, 0]}>\r\n                <sphereGeometry attach=\"geometry\" args={[10, 16, 8]}></sphereGeometry>\r\n                <meshBasicMaterial attach=\"material\" color={0xffaa00}></meshBasicMaterial>\r\n            </mesh>\r\n\r\n\r\n            {/* Floor */}\r\n            <mesh position={[0, -0.5, 0]} rotation={[-Math.PI / 2, 0, 0]}>\r\n                <planeGeometry attach=\"geometry\" args={[1000, 1000, 1, 1]}></planeGeometry>\r\n                <meshBasicMaterial attach=\"material\" map={floorTexture} args={{ side: THREE.DoubleSide }}></meshBasicMaterial>\r\n            </mesh>\r\n\r\n            {/* Sky */}\r\n            <mesh>\r\n                <boxGeometry attach=\"geometry\" args={[10000, 10000, 10000]}></boxGeometry>\r\n                <meshBasicMaterial args={{ color: 0x9990ff, side: THREE.BackSide }}></meshBasicMaterial>\r\n            </mesh>\r\n\r\n            <axesHelper args={[100]}></axesHelper>\r\n        </group>\r\n    )\r\n}\r\n\r\nfunction Lights() {\r\n    return (\r\n        <group>\r\n            <pointLight position={[0, 150, 0]} args={[0xffffff]}></pointLight>\r\n            <ambientLight args={[0x444444]}></ambientLight>\r\n        </group>\r\n    );\r\n}\r\n\r\n\r\nfunction TexturesPage(props) {\r\n\r\n    return (\r\n        <div className=\"wrapper\">\r\n            <Canvas>\r\n                <CameraWrapper />\r\n                <OrbitControls />\r\n                <Lights></Lights>\r\n                <Suspense fallback={null}>\r\n                    <Geometry></Geometry>\r\n                </Suspense>\r\n                <Stats />\r\n            </Canvas>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TexturesPage;\r\n","D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\pages\\textures\\textures-repeat.js",[],"D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\pages\\textures\\texture-text-3d.js",["162","163","164","165"],"import React, { Suspense, useEffect, useMemo, useRef, useState } from 'react';\r\nimport { Canvas, useLoader, useThree } from 'react-three-fiber';\r\nimport * as THREE from 'three';\r\nimport MyCamera from '../../reusable/CustomCamera';\r\nimport Stats from '../../reusable/Stats';\r\nimport OrbitControls from '../../reusable/OrbitControls';\r\n\r\n//Assets\r\nimport floorTex from '../../assets/textures/checkerboard.jpg';\r\nimport roboto from '../../assets/fonts/Roboto Black_Regular.json';\r\n\r\nimport lavaTex from '../../assets/textures/lava.jpg';\r\nimport chromeTex from '../../assets/textures/Chrome.png';\r\n\r\nfunction CameraWrapper(props) {\r\n    const { scene } = useThree();\r\n\r\n    const OnCameraInit = (cam) => {\r\n        cam.position.set(0, 150, 400);\r\n        cam.lookAt(scene.position);\r\n\r\n        scene.fog = new THREE.FogExp2(0x9999ff, 0.00025);\r\n    };\r\n\r\n    return (\r\n        <MyCamera OnCameraInit={OnCameraInit} fov={45} near={0.01} far={20000}></MyCamera>\r\n    );\r\n}\r\n\r\nfunction Geometry() {\r\n    const floorTexture = useLoader(THREE.TextureLoader, floorTex);\r\n    floorTexture.wrapS = floorTexture.wrapT = THREE.RepeatWrapping;\r\n    floorTexture.repeat.set(10, 10);\r\n\r\n    const lavaTexture = useLoader(THREE.TextureLoader, lavaTex);\r\n    const chromeTexture = useLoader(THREE.TextureLoader, chromeTex);\r\n    lavaTexture.wrapS = lavaTexture.wrapT = THREE.RepeatWrapping;\r\n    lavaTexture.repeat.set(0.05, 0.05);\r\n    chromeTexture.wrapS = chromeTexture.wrapT = THREE.RepeatWrapping;\r\n    chromeTexture.repeat.set(0.5, 0.5);\r\n\r\n    let textGeom = useRef();\r\n    let textWidth = 25;\r\n\r\n    const font = new THREE.Font(roboto);\r\n    let textSettings = useMemo(() => ({\r\n        font,\r\n        size: 30, height: 4, curveSegments: 3,\r\n        style: \"normal\",\r\n        bevelThickness: 2, bevelSize: 1, bevelEnabled: true,\r\n        material: 0, extrudeMaterial: 1\r\n    }), [font]);\r\n\r\n    \r\n    useEffect(()=>{\r\n        if(textGeom.current === null){\r\n            textWidth = 25;\r\n            return;\r\n        }\r\n        textGeom.current.computeBoundingBox();\r\n        console.log(\"bb\", textGeom.current.boundingBox);\r\n        textWidth = textGeom.current.boundingBox.max.x - textGeom.current.boundingBox.min.x;\r\n    }, [textGeom]);\r\n\r\n    let textMat = useMemo(()=>{\r\n        let multiMat = [\r\n            new THREE.MeshBasicMaterial({map:lavaTexture}),\r\n            new THREE.MeshBasicMaterial({map:chromeTexture}),\r\n        ];\r\n        return new THREE.MeshFaceMaterial(multiMat);\r\n    })\r\n\r\n    return (\r\n        <group>\r\n            <mesh position={[-0.5 * textWidth, 50, 100]} rotation={[-Math.PI/4, 0, 0]} material={textMat}>\r\n                <textGeometry attach=\"geometry\" ref={textGeom} args={[\"Hello World!\", textSettings]}></textGeometry>\r\n            </mesh>\r\n\r\n            {/* Floor */}\r\n            <mesh position={[0, -0.5, 0]} rotation={[-Math.PI / 2, 0, 0]}>\r\n                <planeGeometry attach=\"geometry\" args={[1000, 1000, 1, 1]}></planeGeometry>\r\n                <meshBasicMaterial attach=\"material\" map={floorTexture} args={{ side: THREE.DoubleSide }}></meshBasicMaterial>\r\n            </mesh>\r\n\r\n            {/* Sky */}\r\n            <mesh>\r\n                <boxGeometry attach=\"geometry\" args={[10000, 10000, 10000]}></boxGeometry>\r\n                <meshBasicMaterial args={{ color: 0x9990ff, side: THREE.BackSide }}></meshBasicMaterial>\r\n            </mesh>\r\n\r\n            <axesHelper args={[100]}></axesHelper>\r\n        </group>\r\n    )\r\n}\r\n\r\nfunction Lights() {\r\n    return (\r\n        <group>\r\n            <pointLight position={[0, 250, 0]} args={[0xffffff]}></pointLight>\r\n            <ambientLight args={[0x111111]}></ambientLight>\r\n        </group>\r\n    );\r\n}\r\n\r\n\r\nfunction TextureText3DPage(props) {\r\n\r\n    return (\r\n        <div className=\"wrapper\">\r\n            <Canvas>\r\n                <CameraWrapper />\r\n                <OrbitControls />\r\n                <Lights></Lights>\r\n                <Suspense fallback={null}>\r\n                    <Geometry></Geometry>\r\n                </Suspense>\r\n                <Stats />\r\n            </Canvas>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TextureText3DPage;\r\n","D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\pages\\textures\\translucence.js",[],"D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\pages\\textures\\shadow.js",[],"D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\pages\\textures\\skybox.js",["166","167","168"],"import React, { Suspense, useEffect, useMemo } from 'react';\r\nimport { Canvas, useLoader, useThree } from 'react-three-fiber';\r\nimport * as THREE from 'three';\r\n\r\nimport MyCamera from '../../reusable/CustomCamera';\r\nimport Stats from '../../reusable/Stats';\r\nimport OrbitControls from '../../reusable/OrbitControls';\r\n\r\nimport { DoubleSide, TextureLoader, RepeatWrapping, BackSide, FogExp2, Texture } from \"three\";\r\n\r\nimport floorTex from '../../assets/textures/checkerboard.jpg';\r\n\r\nimport skyboxXPos from '../../assets/textures/dawnmountain-xpos.png';\r\nimport skyboxXNeg from '../../assets/textures/dawnmountain-xneg.png';\r\nimport skyboxYPos from '../../assets/textures/dawnmountain-ypos.png';\r\nimport skyboxYNeg from '../../assets/textures/dawnmountain-yneg.png';\r\nimport skyboxZPos from '../../assets/textures/dawnmountain-zpos.png';\r\nimport skyboxZNeg from '../../assets/textures/dawnmountain-zneg.png';\r\n\r\nfunction CameraWrapper(props) {\r\n    const { scene } = useThree();\r\n\r\n    const OnCameraInit = (cam) => {\r\n        cam.position.set(0, 150, 400);\r\n        cam.lookAt(scene.position);\r\n\r\n        scene.fog = new FogExp2(0x9999ff, 0.00025);\r\n    };\r\n\r\n    return (\r\n        <MyCamera OnCameraInit={OnCameraInit} fov={45} near={0.01} far={20000}></MyCamera>\r\n    );\r\n}\r\n\r\nfunction Geometry() {\r\n    const floorTexture = useLoader(TextureLoader, floorTex);\r\n    floorTexture.wrapS = floorTexture.wrapT = RepeatWrapping;\r\n    floorTexture.repeat.set(10, 10);\r\n\r\n    let textures = [];\r\n    textures.push(useLoader(TextureLoader, skyboxXPos));\r\n    textures.push(useLoader(TextureLoader, skyboxXNeg));\r\n    textures.push(useLoader(TextureLoader, skyboxYPos));\r\n    textures.push(useLoader(TextureLoader, skyboxYNeg));\r\n    textures.push(useLoader(TextureLoader, skyboxZPos));\r\n    textures.push(useLoader(TextureLoader, skyboxZNeg));\r\n\r\n    //When used MeshFaceMaterial as jsx it acted as a simple material\r\n    //Puting the same image on all faces :-?\r\n    let mat = useMemo(() => {\r\n        let materialArray = [];\r\n        for (let i = 0; i < textures.length; i++) {\r\n            materialArray.push(new THREE.MeshBasicMaterial({\r\n                map: textures[i],\r\n                side: THREE.BackSide\r\n            }));\r\n        }\r\n        return materialArray;\r\n    }, [textures]);\r\n    return (\r\n        <group>\r\n\r\n            <mesh material={mat}>\r\n                <boxGeometry attach=\"geometry\" args={[5000, 5000, 5000]}></boxGeometry>\r\n            </mesh>\r\n\r\n            {/* Floor */}\r\n            <mesh position={[0, -0.5, 0]} rotation={[-Math.PI / 2, 0, 0]}>\r\n                <planeGeometry attach=\"geometry\" args={[1000, 1000, 1, 1]}></planeGeometry>\r\n                <meshBasicMaterial attach=\"material\" map={floorTexture} args={{ side: DoubleSide }}></meshBasicMaterial>\r\n            </mesh>\r\n\r\n            {/* Sky */}\r\n            <mesh>\r\n                <boxGeometry attach=\"geometry\" args={[10000, 10000, 10000]}></boxGeometry>\r\n                <meshBasicMaterial args={{ color: 0x9990ff, side: BackSide }}></meshBasicMaterial>\r\n            </mesh>\r\n\r\n            <axesHelper args={[100]}></axesHelper>\r\n        </group>\r\n    )\r\n}\r\n\r\nfunction Lights() {\r\n    return (\r\n        <group>\r\n            <pointLight position={[0, 250, 0]} args={[0xffffff]}></pointLight>\r\n            <ambientLight args={[0x111111]}></ambientLight>\r\n        </group>\r\n    );\r\n}\r\n\r\n\r\nfunction SkyboxPage(props) {\r\n\r\n    return (\r\n        <div className=\"wrapper\">\r\n            <Canvas>\r\n                <CameraWrapper />\r\n                <OrbitControls />\r\n                <Lights></Lights>\r\n                <Suspense fallback={null}>\r\n                    <Geometry></Geometry>\r\n                </Suspense>\r\n                <Stats />\r\n            </Canvas>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SkyboxPage;\r\n","D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\pages\\textures\\reflection.js",["169","170"],"import React, { Suspense, useEffect, useMemo, useRef, useState } from 'react';\r\nimport { Canvas, useFrame, useLoader, useThree } from 'react-three-fiber';\r\nimport * as THREE from 'three';\r\n\r\nimport MyCamera from '../../reusable/CustomCamera';\r\nimport Stats from '../../reusable/Stats';\r\nimport OrbitControls from '../../reusable/OrbitControls';\r\n\r\nimport { DoubleSide, TextureLoader, RepeatWrapping, BackSide, FogExp2, Texture } from \"three\";\r\n\r\nimport floorTex from '../../assets/textures/checkerboard.jpg';\r\n\r\nimport skyboxXPos from '../../assets/textures/dawnmountain-xpos.png';\r\nimport skyboxXNeg from '../../assets/textures/dawnmountain-xneg.png';\r\nimport skyboxYPos from '../../assets/textures/dawnmountain-ypos.png';\r\nimport skyboxYNeg from '../../assets/textures/dawnmountain-yneg.png';\r\nimport skyboxZPos from '../../assets/textures/dawnmountain-zpos.png';\r\nimport skyboxZNeg from '../../assets/textures/dawnmountain-zneg.png';\r\n\r\nfunction CameraWrapper(props) {\r\n    const { scene } = useThree();\r\n\r\n    const OnCameraInit = (cam) => {\r\n        cam.position.set(0, 150, 400);\r\n        cam.lookAt(scene.position);\r\n\r\n        scene.fog = new FogExp2(0x9999ff, 0.00025);\r\n    };\r\n\r\n    return (\r\n        <MyCamera OnCameraInit={OnCameraInit} fov={45} near={0.01} far={20000}></MyCamera>\r\n    );\r\n}\r\n\r\nfunction Geometry() {\r\n    const floorTexture = useLoader(TextureLoader, floorTex);\r\n    useEffect(() => {\r\n        floorTexture.wrapS = floorTexture.wrapT = RepeatWrapping;\r\n        floorTexture.repeat.set(10, 10);\r\n    }, [floorTexture]);\r\n\r\n    let textures = [];\r\n    textures.push(useLoader(TextureLoader, skyboxXPos));\r\n    textures.push(useLoader(TextureLoader, skyboxXNeg));\r\n    textures.push(useLoader(TextureLoader, skyboxYPos));\r\n    textures.push(useLoader(TextureLoader, skyboxYNeg));\r\n    textures.push(useLoader(TextureLoader, skyboxZPos));\r\n    textures.push(useLoader(TextureLoader, skyboxZNeg));\r\n\r\n    // When used MeshFaceMaterial as jsx it acted as a simple material\r\n    // Puting the same image on all faces :-?\r\n    let mat = useMemo(() => {\r\n        let materialArray = [];\r\n        for (let i = 0; i < textures.length; i++) {\r\n            materialArray.push(new THREE.MeshBasicMaterial({\r\n                map: textures[i],\r\n                side: THREE.BackSide\r\n            }));\r\n        }\r\n        return materialArray;\r\n    }, [textures]);\r\n\r\n    let cubeEnvMap = useRef();\r\n    let mirrorCube = useRef();\r\n    let sphereEnvMap = useRef();\r\n    let mirrorSphere = useRef();\r\n\r\n    //If encoding different from renderer encoding, it will convert each frame and become laggy for more then one cubemap\r\n    //https://threejs.org/examples/webgl_materials_cubemap_dynamic.html\r\n    const [renderTarget] = useState(new THREE.WebGLCubeRenderTarget(512, { format: THREE.RGBFormat, generateMipmaps: true, encoding: THREE.sRGBEncoding }));\r\n    const [sphereRenderTarget] = useState(new THREE.WebGLCubeRenderTarget(512, { format: THREE.RGBFormat, generateMipmaps: true, encoding: THREE.sRGBEncoding}));\r\n    useFrame(({ gl, scene }) => {\r\n        mirrorCube.current.visible = false;\r\n        mirrorSphere.current.visible = false;\r\n        cubeEnvMap.current.update(gl, scene);\r\n        sphereEnvMap.current.update(gl, scene);\r\n        mirrorCube.current.visible = true;\r\n        mirrorSphere.current.visible = true;\r\n    });\r\n\r\n\r\n    return (\r\n        <group>\r\n            <mesh ref={mirrorCube} position={[-75, 50, 0]}>\r\n                <boxGeometry target=\"geometry\" args={[100, 100, 10, 1, 1, 1]}></boxGeometry>\r\n                <meshBasicMaterial target=\"material\" envMap={renderTarget.texture} ></meshBasicMaterial>\r\n            </mesh>\r\n\r\n            <cubeCamera ref={cubeEnvMap} position={[-75, 50, 0]} args={[0.1, 5000, renderTarget]}></cubeCamera>\r\n\r\n            <mesh ref={mirrorSphere} position={[75, 50, 0]}>\r\n                <sphereGeometry target=\"geometry\" args={[50, 32, 16]}></sphereGeometry>\r\n                <meshBasicMaterial target=\"material\" envMap={renderTarget.texture} ></meshBasicMaterial>\r\n            </mesh>\r\n            <cubeCamera ref={sphereEnvMap} position={[75, 50, 0]} args={[0.1, 5000, sphereRenderTarget]}></cubeCamera>\r\n            {/* Skybox */}\r\n            <mesh material={mat}>\r\n                <boxGeometry attach=\"geometry\" args={[5000, 5000, 5000]}></boxGeometry>\r\n            </mesh>\r\n\r\n            {/* Floor */}\r\n            <mesh position={[0, -0.5, 0]} rotation={[-Math.PI / 2, 0, 0]}>\r\n                <planeGeometry attach=\"geometry\" args={[1000, 1000, 1, 1]}></planeGeometry>\r\n                <meshBasicMaterial attach=\"material\" map={floorTexture} args={{ side: DoubleSide }}></meshBasicMaterial>\r\n            </mesh>\r\n\r\n            {/* Sky */}\r\n            <mesh>\r\n                <boxGeometry attach=\"geometry\" args={[10000, 10000, 10000]}></boxGeometry>\r\n                <meshBasicMaterial args={{ color: 0x9990ff, side: BackSide }}></meshBasicMaterial>\r\n            </mesh>\r\n\r\n            <axesHelper args={[100]}></axesHelper>\r\n        </group>\r\n    )\r\n}\r\n\r\nfunction Lights() {\r\n    return (\r\n        <group>\r\n            <pointLight position={[0, 250, 0]} args={[0xffffff]}></pointLight>\r\n            <ambientLight args={[0x111111]}></ambientLight>\r\n        </group>\r\n    );\r\n}\r\n\r\n\r\nfunction ReflectionPage(props) {\r\n    return (\r\n        <div className=\"wrapper\">\r\n            <Canvas>\r\n                <CameraWrapper />\r\n                <OrbitControls />\r\n                <Lights></Lights>\r\n                <Suspense fallback={null}>\r\n                    <Geometry></Geometry>\r\n                </Suspense>\r\n                <Stats />\r\n            </Canvas>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ReflectionPage;\r\n","D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\pages\\textures\\refraction.js",["171","172","173","174","175"],"D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\pages\\textures\\bubble.js",["176","177"],{"ruleId":"178","replacedBy":"179"},{"ruleId":"180","replacedBy":"181"},{"ruleId":"182","severity":1,"message":"183","line":15,"column":7,"nodeType":"184","endLine":15,"endColumn":42,"suggestions":"185"},{"ruleId":"186","severity":1,"message":"187","line":12,"column":15,"nodeType":"188","messageId":"189","endLine":12,"endColumn":21},{"ruleId":"190","severity":1,"message":"191","line":96,"column":4,"nodeType":"192","messageId":"193","endLine":96,"endColumn":8,"fix":"194"},{"ruleId":"186","severity":1,"message":"187","line":18,"column":14,"nodeType":"188","messageId":"189","endLine":18,"endColumn":20},{"ruleId":"195","severity":1,"message":"196","line":3,"column":13,"nodeType":"188","messageId":"197","endLine":3,"endColumn":18},{"ruleId":"195","severity":1,"message":"198","line":1,"column":27,"nodeType":"188","messageId":"197","endLine":1,"endColumn":36},{"ruleId":"195","severity":1,"message":"199","line":1,"column":47,"nodeType":"188","messageId":"197","endLine":1,"endColumn":53},{"ruleId":"195","severity":1,"message":"200","line":27,"column":18,"nodeType":"188","messageId":"197","endLine":27,"endColumn":26},{"ruleId":"182","severity":1,"message":"201","line":27,"column":41,"nodeType":"188","endLine":27,"endColumn":48},{"ruleId":"195","severity":1,"message":"198","line":1,"column":27,"nodeType":"188","messageId":"197","endLine":1,"endColumn":36},{"ruleId":"195","severity":1,"message":"202","line":1,"column":38,"nodeType":"188","messageId":"197","endLine":1,"endColumn":45},{"ruleId":"195","severity":1,"message":"199","line":1,"column":47,"nodeType":"188","messageId":"197","endLine":1,"endColumn":53},{"ruleId":"182","severity":1,"message":"201","line":35,"column":70,"nodeType":"188","endLine":35,"endColumn":77},{"ruleId":"195","severity":1,"message":"203","line":4,"column":10,"nodeType":"188","messageId":"197","endLine":4,"endColumn":20},{"ruleId":"182","severity":1,"message":"204","line":67,"column":6,"nodeType":"184","endLine":67,"endColumn":49,"suggestions":"205"},{"ruleId":"182","severity":1,"message":"206","line":94,"column":8,"nodeType":"184","endLine":94,"endColumn":32,"suggestions":"207"},{"ruleId":"182","severity":1,"message":"206","line":132,"column":8,"nodeType":"184","endLine":132,"endColumn":15,"suggestions":"208"},{"ruleId":"195","severity":1,"message":"209","line":1,"column":55,"nodeType":"188","messageId":"197","endLine":1,"endColumn":63},{"ruleId":"182","severity":1,"message":"210","line":35,"column":11,"nodeType":"211","endLine":35,"endColumn":40},{"ruleId":"182","severity":1,"message":"212","line":52,"column":21,"nodeType":"213","endLine":52,"endColumn":92},{"ruleId":"182","severity":1,"message":"201","line":55,"column":19,"nodeType":"188","endLine":55,"endColumn":26},{"ruleId":"195","severity":1,"message":"198","line":1,"column":27,"nodeType":"188","messageId":"197","endLine":1,"endColumn":36},{"ruleId":"195","severity":1,"message":"203","line":7,"column":10,"nodeType":"188","messageId":"197","endLine":7,"endColumn":20},{"ruleId":"195","severity":1,"message":"209","line":1,"column":55,"nodeType":"188","messageId":"197","endLine":1,"endColumn":63},{"ruleId":"182","severity":1,"message":"214","line":45,"column":11,"nodeType":"211","endLine":45,"endColumn":40},{"ruleId":"182","severity":1,"message":"212","line":62,"column":21,"nodeType":"213","endLine":62,"endColumn":92},{"ruleId":"182","severity":1,"message":"201","line":65,"column":19,"nodeType":"188","endLine":65,"endColumn":26},{"ruleId":"195","severity":1,"message":"198","line":1,"column":27,"nodeType":"188","messageId":"197","endLine":1,"endColumn":36},{"ruleId":"195","severity":1,"message":"215","line":9,"column":72,"nodeType":"188","messageId":"197","endLine":9,"endColumn":79},{"ruleId":"182","severity":1,"message":"216","line":40,"column":9,"nodeType":"211","endLine":40,"endColumn":22},{"ruleId":"195","severity":1,"message":"215","line":9,"column":72,"nodeType":"188","messageId":"197","endLine":9,"endColumn":79},{"ruleId":"182","severity":1,"message":"217","line":42,"column":9,"nodeType":"211","endLine":42,"endColumn":22},{"ruleId":"195","severity":1,"message":"218","line":2,"column":18,"nodeType":"188","messageId":"197","endLine":2,"endColumn":24},{"ruleId":"195","severity":1,"message":"219","line":11,"column":10,"nodeType":"188","messageId":"197","endLine":11,"endColumn":20},{"ruleId":"195","severity":1,"message":"220","line":11,"column":53,"nodeType":"188","messageId":"197","endLine":11,"endColumn":61},{"ruleId":"195","severity":1,"message":"215","line":11,"column":72,"nodeType":"188","messageId":"197","endLine":11,"endColumn":79},{"ruleId":"182","severity":1,"message":"221","line":68,"column":9,"nodeType":"211","endLine":68,"endColumn":22},{"ruleId":"195","severity":1,"message":"215","line":10,"column":72,"nodeType":"188","messageId":"197","endLine":10,"endColumn":79},{"ruleId":"182","severity":1,"message":"222","line":48,"column":9,"nodeType":"211","endLine":48,"endColumn":22},"no-native-reassign",["223"],"no-negated-in-lhs",["224"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'OnCameraInit'. Either include it or remove the dependency array. If 'OnCameraInit' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["225"],"no-use-before-define","'THREEx' was used before it was defined.","Identifier","usedBeforeDefined","no-extra-bind","The function binding is unnecessary.","CallExpression","unexpected",{"range":"226","text":"227"},"no-unused-vars","'THREE' is defined but never used.","unusedVar","'useEffect' is defined but never used.","'useRef' is defined but never used.","'terminus' is assigned a value but never used.","React Hook useMemo does nothing when called with only one argument. Did you forget to pass an array of dependencies?","'useMemo' is defined but never used.","'SceneUtils' is defined but never used.","React Hook useEffect has a missing dependency: 'multiMaterial'. Either include it or remove the dependency array.",["228"],"React Hook useMemo has an unnecessary dependency: 'scene'. Either exclude it or remove the dependency array.",["229"],["230"],"'useState' is defined but never used.","The 'font' object construction makes the dependencies of useMemo Hook (at line 42) change on every render. Move it inside the useMemo callback. Alternatively, wrap the initialization of 'font' in its own useMemo() Hook.","VariableDeclarator","Assignments to the 'textWidth' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","BinaryExpression","The 'font' object construction makes the dependencies of useMemo Hook (at line 52) change on every render. Move it inside the useMemo callback. Alternatively, wrap the initialization of 'font' in its own useMemo() Hook.","'Texture' is defined but never used.","The 'textures' array makes the dependencies of useMemo Hook (at line 59) change on every render. To fix this, wrap the initialization of 'textures' in its own useMemo() Hook.","The 'textures' array makes the dependencies of useMemo Hook (at line 61) change on every render. To fix this, wrap the initialization of 'textures' in its own useMemo() Hook.","'render' is defined but never used.","'DoubleSide' is defined but never used.","'BackSide' is defined but never used.","The 'textures' array makes the dependencies of useMemo Hook (at line 87) change on every render. To fix this, wrap the initialization of 'textures' in its own useMemo() Hook.","The 'textures' array makes the dependencies of useMemo Hook (at line 67) change on every render. To fix this, wrap the initialization of 'textures' in its own useMemo() Hook.","no-global-assign","no-unsafe-negation",{"desc":"231","fix":"232"},[2888,2899],"",{"desc":"233","fix":"234"},{"desc":"235","fix":"236"},{"desc":"237","fix":"238"},"Update the dependencies array to be: [size, setDefaultCamera, near, far, OnCameraInit]",{"range":"239","text":"240"},"Update the dependencies array to be: [groupParent, starShape, extrusionSettings, multiMaterial]",{"range":"241","text":"242"},"Update the dependencies array to be: [props.nrOfFaces]",{"range":"243","text":"244"},"Update the dependencies array to be: []",{"range":"245","text":"246"},[513,548],"[size, setDefaultCamera, near, far, OnCameraInit]",[2237,2280],"[groupParent, starShape, extrusionSettings, multiMaterial]",[3473,3497],"[props.nrOfFaces]",[4932,4939],"[]"]