[{"D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\index.js":"1","D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\App.js":"2","D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\reportWebVitals.js":"3","D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\reusable\\CustomCamera.js":"4","D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\reusable\\Stats.js":"5","D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\reusable\\OrbitControls.js":"6","D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\libs\\THREEx.FullScreen.js":"7","D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\libs\\THREEx.windowresize.js":"8","D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\reusable\\DatGuiContext.js":"9","D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\reusable\\MathUtils.js":"10","D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\pages\\basic-examples\\solid-materials.js":"11","D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\pages\\basic-examples\\color-explorer.js":"12","D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\pages\\basic-examples\\hello-world.js":"13","D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\pages\\basic-examples\\wireframe.js":"14","D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\pages\\basic-examples\\helpers.js":"15","D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\pages\\basic-examples\\outline.js":"16","D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\pages\\basic-examples\\dashed-lines.js":"17","D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\pages\\basic-examples\\shapes.js":"18","D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\pages\\basic-examples\\extrusion.js":"19","D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\pages\\basic-examples\\vertex-colors.js":"20","D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\pages\\basic-examples\\text-3d.js":"21","D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\pages\\textures\\textures.js":"22","D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\pages\\textures\\textures-repeat.js":"23","D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\pages\\textures\\texture-text-3d.js":"24","D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\pages\\textures\\translucence.js":"25","D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\pages\\textures\\shadow.js":"26","D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\pages\\textures\\skybox.js":"27","D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\pages\\textures\\reflection.js":"28","D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\pages\\textures\\refraction.js":"29","D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\pages\\textures\\bubble.js":"30","D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\pages\\textures\\texture-from-canvas.js":"31","D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\pages\\textures\\texture-animation.js":"32","D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\reusable\\TextureAnimator.js":"33","D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\pages\\sprites-examples\\sprites.js":"34","D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\pages\\sprites-examples\\sprite-text-labels.js":"35","D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\pages\\sprites-examples\\labeled-geometry.js":"36","D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\reusable\\TextSprite.js":"37","D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\pages\\mouse-and-keyboard-examples\\mouse-sprite.js":"38","D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\pages\\mouse-and-keyboard-examples\\mouse-click.js":"39","D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\pages\\mouse-and-keyboard-examples\\mouse-hover.js":"40","D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\pages\\mouse-and-keyboard-examples\\mouse-tooltip.js":"41"},{"size":500,"mtime":499162500000,"results":"42","hashOfConfig":"43"},{"size":4842,"mtime":1618943173980,"results":"44","hashOfConfig":"43"},{"size":362,"mtime":499162500000,"results":"45","hashOfConfig":"43"},{"size":630,"mtime":1615313126003,"results":"46","hashOfConfig":"43"},{"size":513,"mtime":1615312928761,"results":"47","hashOfConfig":"43"},{"size":605,"mtime":1615313822829,"results":"48","hashOfConfig":"43"},{"size":3257,"mtime":1612387128778,"results":"49","hashOfConfig":"43"},{"size":1535,"mtime":1612909549917,"results":"50","hashOfConfig":"43"},{"size":81,"mtime":1612730468929,"results":"51","hashOfConfig":"43"},{"size":134,"mtime":1614551716088,"results":"52","hashOfConfig":"43"},{"size":3743,"mtime":1615308483802,"results":"53","hashOfConfig":"43"},{"size":7547,"mtime":1615490975714,"results":"54","hashOfConfig":"43"},{"size":2622,"mtime":1617556557708,"results":"55","hashOfConfig":"43"},{"size":3313,"mtime":1615490980490,"results":"56","hashOfConfig":"43"},{"size":2943,"mtime":1615490978747,"results":"57","hashOfConfig":"43"},{"size":2685,"mtime":1615490979147,"results":"58","hashOfConfig":"43"},{"size":3102,"mtime":1615490977114,"results":"59","hashOfConfig":"43"},{"size":7408,"mtime":1615490979468,"results":"60","hashOfConfig":"43"},{"size":4004,"mtime":1615490977796,"results":"61","hashOfConfig":"43"},{"size":7061,"mtime":1617641436074,"results":"62","hashOfConfig":"43"},{"size":3644,"mtime":1615490979847,"results":"63","hashOfConfig":"43"},{"size":5656,"mtime":1615490981268,"results":"64","hashOfConfig":"43"},{"size":4939,"mtime":1615490980987,"results":"65","hashOfConfig":"43"},{"size":4136,"mtime":1615490980729,"results":"66","hashOfConfig":"43"},{"size":5517,"mtime":1615490981649,"results":"67","hashOfConfig":"43"},{"size":4716,"mtime":1615494167059,"results":"68","hashOfConfig":"43"},{"size":3812,"mtime":1615578591201,"results":"69","hashOfConfig":"43"},{"size":5706,"mtime":1615582069727,"results":"70","hashOfConfig":"43"},{"size":5659,"mtime":1615667129674,"results":"71","hashOfConfig":"43"},{"size":5773,"mtime":1615843619357,"results":"72","hashOfConfig":"43"},{"size":4166,"mtime":1616706952632,"results":"73","hashOfConfig":"43"},{"size":3655,"mtime":1617055997589,"results":"74","hashOfConfig":"43"},{"size":1393,"mtime":1617055850880,"results":"75","hashOfConfig":"43"},{"size":3440,"mtime":1617133176464,"results":"76","hashOfConfig":"43"},{"size":3138,"mtime":1617554897192,"results":"77","hashOfConfig":"43"},{"size":4156,"mtime":1617555704066,"results":"78","hashOfConfig":"43"},{"size":2911,"mtime":1617397037271,"results":"79","hashOfConfig":"43"},{"size":4072,"mtime":1617639715226,"results":"80","hashOfConfig":"43"},{"size":4914,"mtime":1618866142531,"results":"81","hashOfConfig":"43"},{"size":3614,"mtime":1618869405498,"results":"82","hashOfConfig":"43"},{"size":5567,"mtime":1618948739127,"results":"83","hashOfConfig":"43"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},"rqskcl",{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"86"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"100","usedDeprecatedRules":"86"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"86"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"86"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"86"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"86"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"86"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"86"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"86"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"86"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"86"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"86"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"86"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"86"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"86"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"86"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"86"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"86"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"86"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"86"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"86"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"86"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"86"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"86"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\index.js",[],["191","192"],"D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\App.js",[],"D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\reportWebVitals.js",[],"D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\reusable\\CustomCamera.js",["193"],"import React, { useEffect } from 'react';\r\nimport {PerspectiveCamera} from 'three';\r\nimport { useThree } from 'react-three-fiber';\r\n\r\nconst extent = 10;\r\nconst MyCamera = ({near=0.1, far=1000, OnCameraInit}) => {\r\n    const { setDefaultCamera, size } = useThree();\r\n    useEffect(() => {\r\n        const cam = new PerspectiveCamera(70, size.width / size.height, near, far);\r\n        cam.position.z = 2 * extent;\r\n        // cam.up.set(0, 0, 1);\r\n        setDefaultCamera(cam);\r\n\r\n        OnCameraInit(cam);\r\n    },[size, setDefaultCamera, near, far]);\r\n\r\n    return (\r\n        <group></group>\r\n    );\r\n}\r\n\r\nexport default MyCamera;","D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\reusable\\Stats.js",[],"D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\reusable\\OrbitControls.js",[],"D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\libs\\THREEx.FullScreen.js",["194","195"],"// This THREEx helper makes it easy to handle the fullscreen API\r\n// * it hides the prefix for each browser\r\n// * it hides the little discrepencies of the various vendor API\r\n// * at the time of this writing (nov 2011) it is available in \r\n//   [firefox nightly](http://blog.pearce.org.nz/2011/11/firefoxs-html-full-screen-api-enabled.html),\r\n//   [webkit nightly](http://peter.sh/2011/01/javascript-full-screen-api-navigation-timing-and-repeating-css-gradients/) and\r\n//   [chrome stable](http://updates.html5rocks.com/2011/10/Let-Your-Content-Do-the-Talking-Fullscreen-API).\r\n\r\n// # Code\r\n\r\n/** @namespace */\r\nvar THREEx\t\t= THREEx \t\t|| {};\r\nTHREEx.FullScreen\t= THREEx.FullScreen\t|| {};\r\n\r\n/**\r\n * test if it is possible to have fullscreen\r\n * \r\n * @returns {Boolean} true if fullscreen API is available, false otherwise\r\n*/\r\nTHREEx.FullScreen.available\t= function()\r\n{\r\n\treturn this._hasWebkitFullScreen || this._hasMozFullScreen;\r\n}\r\n\r\n/**\r\n * test if fullscreen is currently activated\r\n * \r\n * @returns {Boolean} true if fullscreen is currently activated, false otherwise\r\n*/\r\nTHREEx.FullScreen.activated\t= function()\r\n{\r\n\tif( this._hasWebkitFullScreen ){\r\n\t\treturn document.webkitIsFullScreen;\r\n\t}else if( this._hasMozFullScreen ){\r\n\t\treturn document.mozFullScreen;\r\n\t}else{\r\n\t\tconsole.assert(false);\r\n\t}\r\n}\r\n\r\n/**\r\n * Request fullscreen on a given element\r\n * @param {DomElement} element to make fullscreen. optional. default to document.body\r\n*/\r\nTHREEx.FullScreen.request\t= function(element)\r\n{\r\n\telement\t= element\t|| document.body;\r\n\tif( this._hasWebkitFullScreen ){\r\n\t\telement.webkitRequestFullScreen(Element.ALLOW_KEYBOARD_INPUT);\r\n\t}else if( this._hasMozFullScreen ){\r\n\t\telement.mozRequestFullScreen();\r\n\t}else{\r\n\t\tconsole.assert(false);\r\n\t}\r\n}\r\n\r\n/**\r\n * Cancel fullscreen\r\n*/\r\nTHREEx.FullScreen.cancel\t= function()\r\n{\r\n\tif( this._hasWebkitFullScreen ){\r\n\t\tdocument.webkitCancelFullScreen();\r\n\t}else if( this._hasMozFullScreen ){\r\n\t\tdocument.mozCancelFullScreen();\r\n\t}else{\r\n\t\tconsole.assert(false);\r\n\t}\r\n}\r\n\r\n// internal functions to know which fullscreen API implementation is available\r\nTHREEx.FullScreen._hasWebkitFullScreen\t= 'webkitCancelFullScreen' in document\t? true : false;\t\r\nTHREEx.FullScreen._hasMozFullScreen\t= 'mozCancelFullScreen' in document\t? true : false;\t\r\n\r\n/**\r\n * Bind a key to renderer screenshot\r\n * usage: THREEx.FullScreen.bindKey({ charCode : 'a'.charCodeAt(0) }); \r\n*/\r\nTHREEx.FullScreen.bindKey\t= function(opts){\r\n\topts\t\t= opts\t\t|| {};\r\n\tvar charCode\t= opts.charCode\t|| 'f'.charCodeAt(0);\r\n\tvar dblclick\t= opts.dblclick !== undefined ? opts.dblclick : false;\r\n\tvar element\t= opts.element\r\n\r\n\tvar toggle\t= function(){\r\n\t\tif( THREEx.FullScreen.activated() ){\r\n\t\t\tTHREEx.FullScreen.cancel();\r\n\t\t}else{\r\n\t\t\tTHREEx.FullScreen.request(element);\r\n\t\t}\t\t\r\n\t}\r\n\r\n\tvar onKeyPress\t= function(event){\r\n\t\tif( event.which !== charCode )\treturn;\r\n\t\ttoggle();\r\n\t}.bind(this);\r\n\r\n\tdocument.addEventListener('keypress', onKeyPress, false);\r\n\r\n\tdblclick && document.addEventListener('dblclick', toggle, false);\r\n\r\n\treturn {\r\n\t\tunbind\t: function(){\r\n\t\t\tdocument.removeEventListener('keypress', onKeyPress, false);\r\n\t\t\tdblclick && document.removeEventListener('dblclick', toggle, false);\r\n\t\t}\r\n\t};\r\n}\r\n\r\nexport default THREEx.FullScreen;","D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\libs\\THREEx.windowresize.js",["196"],"// This THREEx helper makes it easy to handle window resize.\r\n// It will update renderer and camera when window is resized.\r\n//\r\n// # Usage\r\n//\r\n// **Step 1**: Start updating renderer and camera\r\n//\r\n// ```var windowResize = new THREEx.WindowResize(aRenderer, aCamera)```\r\n//    \r\n// **Step 2**: stop updating renderer and camera\r\n//\r\n// ```windowResize.destroy()```\r\n// # Code\r\n\r\n//\r\n\r\n/** @namespace */\r\nvar THREEx\t= THREEx || {}\r\n\r\n/**\r\n * Update renderer and camera when the window is resized\r\n * \r\n * @param {Object} renderer the renderer to update\r\n * @param {Object} Camera the camera to update\r\n * @param {Function} dimension callback for renderer size\r\n*/\r\nTHREEx.WindowResize\t= function(renderer, camera, dimension){\r\n\tdimension \t= dimension || function(){ return { width: window.innerWidth, height: window.innerHeight } }\r\n\tvar callback\t= function(){\r\n\t\t// fetch target renderer size\r\n\t\tvar rendererSize = dimension();\r\n\t\t// notify the renderer of the size change\r\n\t\trenderer.setSize( rendererSize.width, rendererSize.height )\r\n\t\t// update the camera\r\n\t\tcamera.aspect\t= rendererSize.width / rendererSize.height\r\n\t\tcamera.updateProjectionMatrix()\r\n\t}\r\n\t// bind the resize event\r\n\twindow.addEventListener('resize', callback, false)\r\n\t// return .stop() the function to stop watching window resize\r\n\treturn {\r\n\t\ttrigger\t: function(){\r\n\t\t\tcallback()\r\n\t\t},\r\n\t\t/**\r\n\t\t * Stop watching window resize\r\n\t\t*/\r\n\t\tdestroy\t: function(){\r\n\t\t\twindow.removeEventListener('resize', callback)\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default THREEx.WindowResize;","D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\reusable\\DatGuiContext.js",[],"D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\reusable\\MathUtils.js",[],"D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\pages\\basic-examples\\solid-materials.js",[],"D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\pages\\basic-examples\\color-explorer.js",[],"D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\pages\\basic-examples\\hello-world.js",["197"],"import React, { Suspense } from 'react';\r\nimport { Canvas, useLoader, useThree } from 'react-three-fiber';\r\nimport * as THREE from 'three';\r\n\r\nimport MyCamera from '../../reusable/CustomCamera';\r\nimport Stats from '../../reusable/Stats';\r\nimport OrbitControls from '../../reusable/OrbitControls';\r\n\r\nimport { DoubleSide, TextureLoader, RepeatWrapping, BackSide, FogExp2 } from \"three\";\r\n\r\nimport floorTex from '../../assets/textures/checkerboard.jpg';\r\n\r\nfunction CameraWrapper(props) {\r\n  const { scene } = useThree();\r\n\r\n  const OnCameraInit = (cam) => {\r\n    cam.position.set(0, 150, 400);\r\n    cam.lookAt(scene.position);\r\n\r\n    scene.fog = new FogExp2(0x9999ff, 0.00025);\r\n  };\r\n\r\n  return (\r\n    <MyCamera OnCameraInit={OnCameraInit} fov={45} near={0.01} far={20000}></MyCamera>\r\n  );\r\n}\r\n\r\nfunction Geometry() {\r\n  const floorTexture = useLoader(TextureLoader, floorTex);\r\n  floorTexture.wrapS = floorTexture.wrapT = RepeatWrapping;\r\n  floorTexture.repeat.set(10, 10);\r\n  return (\r\n    <group>\r\n      <mesh position={[100, 50, -50]}>\r\n        <sphereGeometry attach=\"geometry\" args={[50, 32, 16]} />\r\n        <meshLambertMaterial attach=\"material\" args={{ color: 0x8888ff }}></meshLambertMaterial>\r\n      </mesh>\r\n      <mesh position={[-100, 50, -50]}>\r\n        <boxGeometry attach=\"geometry\" args={[100, 100, 100, 1, 1, 1]}></boxGeometry>\r\n        <meshLambertMaterial attach=\"material\" args={{ color: 0x8888ff }}></meshLambertMaterial>\r\n      </mesh>\r\n\r\n      {/* Floor */}\r\n      <mesh position={[0, -0.5, 0]} rotation={[-Math.PI / 2, 0, 0]}>\r\n        <planeGeometry attach=\"geometry\" args={[1000, 1000, 1, 1]}></planeGeometry>\r\n                <meshBasicMaterial attach=\"material\" map={floorTexture} side={DoubleSide}></meshBasicMaterial>\r\n      </mesh>\r\n\r\n      {/* Sky */}\r\n      <mesh>\r\n        <boxGeometry attach=\"geometry\" args={[10000, 10000, 10000]}></boxGeometry>\r\n                <meshBasicMaterial color={0x9990ff} side={BackSide}></meshBasicMaterial>\r\n      </mesh>\r\n\r\n      <axesHelper args={[100]}></axesHelper>\r\n    </group>\r\n  )\r\n}\r\n\r\nfunction Lights() {\r\n  return (\r\n    <group>\r\n      <pointLight position={[0, 250, 0]} args={[0xffffff]}></pointLight>\r\n      <ambientLight args={[0x111111]}></ambientLight>\r\n    </group>\r\n  );\r\n}\r\n\r\n\r\nfunction HelloWorldPage(props) {\r\n\r\n  return (\r\n    <div className=\"wrapper\">\r\n      <Canvas>\r\n        <CameraWrapper />\r\n        <OrbitControls />\r\n        <Lights></Lights>\r\n        <Suspense fallback={null}>\r\n          <Geometry></Geometry>\r\n        </Suspense>\r\n        <Stats />\r\n      </Canvas>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default HelloWorldPage;\r\n","D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\pages\\basic-examples\\wireframe.js",[],"D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\pages\\basic-examples\\helpers.js",["198","199","200","201"],"import React, { Suspense, useEffect, useMemo, useRef } from 'react';\r\nimport * as THREE from 'three';\r\nimport { Canvas, useThree } from 'react-three-fiber';\r\n\r\nimport MyCamera from '../../reusable/CustomCamera';\r\nimport Stats from '../../reusable/Stats';\r\nimport OrbitControls from '../../reusable/OrbitControls';\r\n\r\nimport { BackSide, FogExp2 } from \"three\";\r\n\r\nfunction CameraWrapper() {\r\n    const { scene } = useThree();\r\n\r\n    const OnCameraInit = (cam) => {\r\n        cam.position.set(0, 150, 400);\r\n        cam.lookAt(scene.position);\r\n\r\n        scene.fog = new FogExp2(0x9999ff, 0.00025);\r\n    };\r\n\r\n    return (\r\n        <MyCamera OnCameraInit={OnCameraInit} fov={45} near={0.01} far={20000}></MyCamera>\r\n    );\r\n}\r\n\r\nfunction Geometry() {\r\n    let [origin, terminus, direction] = useMemo(()=>{\r\n        let origin = new THREE.Vector3(50, 100, 50);\r\n        let terminus = new THREE.Vector3(75, 75, 75);\r\n        let direction = new THREE.Vector3().subVectors(terminus, origin).normalize();\r\n        return [origin, terminus, direction];\r\n    })\r\n    return (\r\n        <group>\r\n            <mesh position={[40, 40, 40]}>\r\n                <sphereGeometry args={[30, 32, 16]}></sphereGeometry>\r\n                <meshLambertMaterial color={0x000088}></meshLambertMaterial>\r\n            </mesh>\r\n\r\n            <axesHelper args={[50]} position={[40, 40, 40]}>\r\n            </axesHelper>\r\n\r\n            <gridHelper args={[200, 10, new THREE.Color(0x006600), new THREE.Color(0x006600)]} position={[100, 0, 100]}></gridHelper>\r\n            <gridHelper args={[200, 10, new THREE.Color(0x000066), new THREE.Color(0x000066)]} position={[100, 100, 0]} rotation={[Math.PI/2, 0, 0]}></gridHelper>\r\n            <gridHelper args={[200, 10, new THREE.Color(0x660000), new THREE.Color(0x660000)]} position={[0, 100, 100]} rotation={[0, 0, Math.PI/2]}></gridHelper>\r\n\r\n            <arrowHelper args={[direction, origin, 50, 0x884400]}></arrowHelper>\r\n\r\n\r\n            {/* Sky */}\r\n            <mesh>\r\n                <boxGeometry attach=\"geometry\" args={[10000, 10000, 10000]}></boxGeometry>\r\n                <meshBasicMaterial args={{ color: 0x9990ff, side: BackSide }}></meshBasicMaterial>\r\n            </mesh>\r\n\r\n            <axesHelper args={[100]}></axesHelper>\r\n        </group>\r\n    )\r\n}\r\n\r\nfunction Lights() {\r\n    return (\r\n        <group>\r\n            <pointLight position={[0, 250, 0]} args={[0xffffff]}></pointLight>\r\n            <ambientLight args={[0x111111]}></ambientLight>\r\n        </group>\r\n    );\r\n}\r\n\r\nfunction HelpersPage(props) {\r\n\r\n    return (\r\n        <div className=\"wrapper\">\r\n            <Canvas>\r\n                <CameraWrapper />\r\n                <OrbitControls />\r\n                <Lights></Lights>\r\n                <Suspense fallback={null}>\r\n                    <Geometry></Geometry>\r\n                </Suspense>\r\n                <Stats />\r\n            </Canvas>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default HelpersPage;\r\n","D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\pages\\basic-examples\\outline.js",["202","203","204"],"import React, { Suspense, useEffect, useMemo, useRef } from 'react';\r\nimport * as THREE from 'three';\r\nimport { Canvas, useThree } from 'react-three-fiber';\r\n\r\nimport MyCamera from '../../reusable/CustomCamera';\r\nimport Stats from '../../reusable/Stats';\r\nimport OrbitControls from '../../reusable/OrbitControls';\r\n\r\nimport { BackSide, FogExp2 } from \"three\";\r\n\r\nfunction CameraWrapper() {\r\n    const { scene } = useThree();\r\n\r\n    const OnCameraInit = (cam) => {\r\n        cam.position.set(0, 150, 400);\r\n        cam.lookAt(scene.position);\r\n\r\n        scene.fog = new FogExp2(0x9999ff, 0.00025);\r\n    };\r\n\r\n    return (\r\n        <MyCamera OnCameraInit={OnCameraInit} fov={45} near={0.01} far={20000}></MyCamera>\r\n    );\r\n}\r\n\r\nfunction Geometry() {\r\n\r\n    return (\r\n        <group>\r\n            <mesh position={[-60, 55, 0]}>\r\n                <sphereGeometry args={[50, 32, 16]}></sphereGeometry>\r\n                <meshNormalMaterial></meshNormalMaterial>\r\n            </mesh>\r\n\r\n            <mesh position={[-60, 55, 0]} scale={[1.05, 1.05, 1.05]}>\r\n                <sphereGeometry args={[50, 32, 16]}></sphereGeometry>\r\n                <meshBasicMaterial color={0xff0000} side={THREE.BackSide}></meshBasicMaterial>\r\n            </mesh>\r\n\r\n            <mesh position={[60, 60, 0]}>\r\n                <boxGeometry args={[80, 80, 80]}></boxGeometry>\r\n                <meshNormalMaterial></meshNormalMaterial>\r\n            </mesh>\r\n\r\n            <mesh position={[60, 60, 0]} scale={[1.05, 1.05, 1.05]}>\r\n                <boxGeometry args={[80, 80, 80]}></boxGeometry>\r\n                <meshBasicMaterial color={0x00ff00} side={THREE.BackSide}></meshBasicMaterial>\r\n            </mesh>\r\n\r\n\r\n            {/* Sky */}\r\n            <mesh>\r\n                <boxGeometry attach=\"geometry\" args={[10000, 10000, 10000]}></boxGeometry>\r\n                <meshBasicMaterial args={{ color: 0x9990ff, side: BackSide }}></meshBasicMaterial>\r\n            </mesh>\r\n\r\n            <axesHelper args={[100]}></axesHelper>\r\n        </group>\r\n    )\r\n}\r\n\r\nfunction Lights() {\r\n    return (\r\n        <group>\r\n            <pointLight position={[0, 250, 0]} args={[0xffffff]}></pointLight>\r\n            <ambientLight args={[0x111111]}></ambientLight>\r\n        </group>\r\n    );\r\n}\r\n\r\nfunction OutlinePage(props) {\r\n\r\n    return (\r\n        <div className=\"wrapper\">\r\n            <Canvas>\r\n                <CameraWrapper />\r\n                <OrbitControls />\r\n                <Lights></Lights>\r\n                <Suspense fallback={null}>\r\n                    <Geometry></Geometry>\r\n                </Suspense>\r\n                <Stats />\r\n            </Canvas>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default OutlinePage;\r\n","D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\pages\\basic-examples\\dashed-lines.js",["205"],"import React, { Suspense, useEffect, useMemo, useRef } from 'react';\r\nimport * as THREE from 'three';\r\nimport { Canvas, useThree } from 'react-three-fiber';\r\n\r\nimport MyCamera from '../../reusable/CustomCamera';\r\nimport Stats from '../../reusable/Stats';\r\nimport OrbitControls from '../../reusable/OrbitControls';\r\n\r\nimport { BackSide, FogExp2 } from \"three\";\r\n\r\nfunction CameraWrapper() {\r\n    const { scene } = useThree();\r\n\r\n    const OnCameraInit = (cam) => {\r\n        cam.position.set(0, 150, 400);\r\n        cam.lookAt(scene.position);\r\n\r\n        scene.fog = new FogExp2(0x9999ff, 0.00025);\r\n    };\r\n\r\n    return (\r\n        <MyCamera OnCameraInit={OnCameraInit} fov={45} near={0.01} far={20000}></MyCamera>\r\n    );\r\n}\r\n\r\nfunction Geometry() {\r\n    let lineRef = useRef();\r\n    let lineRef2 = useRef();\r\n\r\n    useEffect(() => {\r\n        lineRef.current.computeLineDistances();\r\n        lineRef2.current.computeLineDistances();\r\n    }, [lineRef, lineRef2]);\r\n\r\n    let [lineGeometry, lineMat, dashedLineGeometry, dashedLineMat] = useMemo(() => {\r\n        //Simple Line\r\n        let lineGeometry = new THREE.BufferGeometry();\r\n        const points = [\r\n            new THREE.Vector3(-150, -100, 0),\r\n            new THREE.Vector3(-150, 100, 0)\r\n        ];\r\n        lineGeometry.setFromPoints(points);\r\n\r\n        const lineMat = new THREE.LineBasicMaterial({ color: 0xcc0000 });\r\n\r\n        //Dotted Line\r\n        let dashedLineGeometry = new THREE.BufferGeometry();\r\n        const dashedLinePoints = [\r\n            new THREE.Vector3(-100, -100, 0),\r\n            new THREE.Vector3(-100, 100, 0)\r\n        ];\r\n        dashedLineGeometry.setFromPoints(dashedLinePoints);\r\n\r\n        const dashedLineMat = new THREE.LineDashedMaterial({ color: 0x00cc00, dashSize: 4, gapSize: 2, linewidth: 4 });\r\n\r\n        return [lineGeometry, lineMat, dashedLineGeometry, dashedLineMat];\r\n    });\r\n\r\n    return (\r\n        <group>\r\n            <line ref={lineRef} geometry={lineGeometry} material={lineMat}></line>\r\n            <line ref={lineRef2} geometry={dashedLineGeometry} material={dashedLineMat}></line>\r\n\r\n            {/* Sky */}\r\n            <mesh>\r\n                <boxGeometry attach=\"geometry\" args={[10000, 10000, 10000]}></boxGeometry>\r\n                <meshBasicMaterial args={{ color: 0x9990ff, side: BackSide }}></meshBasicMaterial>\r\n            </mesh>\r\n\r\n            <axesHelper args={[100]}></axesHelper>\r\n        </group>\r\n    )\r\n}\r\n\r\nfunction Lights() {\r\n    return (\r\n        <group>\r\n            <pointLight position={[0, 250, 0]} args={[0xffffff]}></pointLight>\r\n            <ambientLight args={[0x111111]}></ambientLight>\r\n        </group>\r\n    );\r\n}\r\n\r\nfunction DashedLinesPage(props) {\r\n\r\n    return (\r\n        <div className=\"wrapper\">\r\n            <Canvas>\r\n                <CameraWrapper />\r\n                <OrbitControls />\r\n                <Lights></Lights>\r\n                <Suspense fallback={null}>\r\n                    <Geometry></Geometry>\r\n                </Suspense>\r\n                <Stats />\r\n            </Canvas>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DashedLinesPage;\r\n","D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\pages\\basic-examples\\shapes.js",[],"D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\pages\\basic-examples\\extrusion.js",["206","207"],"import React, { Suspense, useEffect, useRef } from 'react';\r\nimport { Canvas, useLoader, useThree } from 'react-three-fiber';\r\nimport * as THREE from 'three';\r\nimport { SceneUtils } from 'three/examples/jsm/utils/SceneUtils';\r\n\r\nimport MyCamera from '../../reusable/CustomCamera';\r\nimport Stats from '../../reusable/Stats';\r\nimport OrbitControls from '../../reusable/OrbitControls';\r\n\r\nimport { DoubleSide, TextureLoader, RepeatWrapping, BackSide, FogExp2 } from \"three\";\r\n\r\nimport floorTex from '../../assets/textures/checkerboard.jpg';\r\n\r\nfunction CameraWrapper(props) {\r\n  const { scene } = useThree();\r\n\r\n  const OnCameraInit = (cam) => {\r\n    cam.position.set(0, 150, 400);\r\n    cam.lookAt(scene.position);\r\n\r\n    scene.fog = new FogExp2(0x9999ff, 0.00025);\r\n  };\r\n\r\n  return (\r\n    <MyCamera OnCameraInit={OnCameraInit} fov={45} near={0.01} far={20000}></MyCamera>\r\n  );\r\n}\r\n\r\nfunction Star() {\r\n\r\n  let groupParent = useRef();\r\n\r\n  //For some reason face doesn't have different material to extrusion\r\n  let extrusionSettings = {\r\n    size: 30, height: 4, curveSegments: 3,\r\n    bevelThickness: 1, bevelSize: 2, bevelEnabled: false,\r\n    material: 0, extrudeMaterial: 1\r\n  };\r\n\r\n  var starPoints = [];\r\n\r\n  starPoints.push(new THREE.Vector2(0, 50));\r\n  starPoints.push(new THREE.Vector2(10, 10));\r\n  starPoints.push(new THREE.Vector2(40, 10));\r\n  starPoints.push(new THREE.Vector2(20, -10));\r\n  starPoints.push(new THREE.Vector2(30, -50));\r\n  starPoints.push(new THREE.Vector2(0, -20));\r\n  starPoints.push(new THREE.Vector2(-30, -50));\r\n  starPoints.push(new THREE.Vector2(-20, -10));\r\n  starPoints.push(new THREE.Vector2(-40, 10));\r\n  starPoints.push(new THREE.Vector2(-10, 10));\r\n\r\n  let starShape = new THREE.Shape(starPoints);\r\n  \r\n  const materialFront = new THREE.MeshBasicMaterial({ color: 0xffff00 });\r\n  const materialSide = new THREE.MeshBasicMaterial({ color: 0xff8800 });\r\n\r\n  let multiMaterial = new THREE.MeshFaceMaterial([materialFront, materialSide]);\r\n\r\n  useEffect(() => {\r\n    var starShapeGeometry = new THREE.Mesh(\r\n      new THREE.ExtrudeGeometry(starShape, extrusionSettings),\r\n      multiMaterial\r\n    );\r\n    starShapeGeometry.position.set(0, 50, 0);\r\n    groupParent.current.add(starShapeGeometry);\r\n  }, [groupParent, starShape, extrusionSettings])\r\n\r\n  return (\r\n    <group ref={groupParent}>\r\n      <mesh position={[0, 50, 0]}>\r\n        <extrudeGeometry attach=\"geometry\" args={[starShape, extrusionSettings]}></extrudeGeometry>\r\n        <meshBasicMaterial args={{ color: 0x000000, wireframe: true, transparent: true }}></meshBasicMaterial>\r\n      </mesh>\r\n    </group>\r\n  )\r\n}\r\n\r\nfunction Geometry() {\r\n  const floorTexture = useLoader(TextureLoader, floorTex);\r\n  floorTexture.wrapS = floorTexture.wrapT = RepeatWrapping;\r\n  floorTexture.repeat.set(10, 10);\r\n  return (\r\n    <group>\r\n      <Star></Star>\r\n\r\n      {/* Floor */}\r\n      <mesh position={[0, -0.5, 0]} rotation={[-Math.PI / 2, 0, 0]}>\r\n        <planeGeometry attach=\"geometry\" args={[1000, 1000, 1, 1]}></planeGeometry>\r\n        <meshBasicMaterial attach=\"material\" map={floorTexture} args={{ side: DoubleSide }}></meshBasicMaterial>\r\n      </mesh>\r\n\r\n      {/* Sky */}\r\n      <mesh>\r\n        <boxGeometry attach=\"geometry\" args={[10000, 10000, 10000]}></boxGeometry>\r\n        <meshBasicMaterial args={{ color: 0x9990ff, side: BackSide }}></meshBasicMaterial>\r\n      </mesh>\r\n\r\n      <axesHelper args={[100]}></axesHelper>\r\n    </group>\r\n  )\r\n}\r\n\r\nfunction Lights() {\r\n  return (\r\n    <group>\r\n      <pointLight position={[0, 250, 0]} args={[0xffffff]}></pointLight>\r\n      <ambientLight args={[0x111111]}></ambientLight>\r\n    </group>\r\n  );\r\n}\r\n\r\n\r\nfunction ExtrusionPage(props) {\r\n\r\n  return (\r\n    <div className=\"wrapper\">\r\n      <Canvas>\r\n        <CameraWrapper />\r\n        <OrbitControls />\r\n        <Lights></Lights>\r\n        <Suspense fallback={null}>\r\n          <Geometry></Geometry>\r\n        </Suspense>\r\n        <Stats />\r\n      </Canvas>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ExtrusionPage;\r\n","D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\pages\\basic-examples\\vertex-colors.js",["208","209"],"import React, { Suspense, useMemo, useState } from 'react';\r\nimport * as THREE from 'three';\r\nimport { Canvas, useThree, useLoader } from 'react-three-fiber';\r\n\r\nimport MathUtils from '../../reusable/MathUtils';\r\n\r\nimport MyCamera from '../../reusable/CustomCamera';\r\nimport Stats from '../../reusable/Stats';\r\nimport OrbitControls from '../../reusable/OrbitControls';\r\n\r\nimport floorTex from '../../assets/textures/checkerboard.jpg';\r\n\r\nimport { BackSide, FogExp2 } from \"three\";\r\n\r\nfunction CameraWrapper() {\r\n    const { scene } = useThree();\r\n\r\n    const OnCameraInit = (cam) => {\r\n        cam.position.set(0, 150, 400);\r\n        cam.lookAt(scene.position);\r\n\r\n        scene.fog = new FogExp2(0x9999ff, 0.00025);\r\n    };\r\n\r\n    return (\r\n        <MyCamera OnCameraInit={OnCameraInit} fov={45} near={0.01} far={20000}></MyCamera>\r\n    );\r\n}\r\n\r\n//This replaces Face color, as I wasn't really able to find an actual replacement for it, so I used vertex color instead. \r\n//I guess Faces used this behind the scenes anyway\r\nfunction NonIndexedFaceColors(props) {\r\n    let [boxGeometry] = useMemo(() => {\r\n        //If it is indexed, the vertices indexes are re-used between triangles.\r\n        //We'll use it like this so we can give different colors to each triangle\r\n        let boxGeometry = new THREE.BoxBufferGeometry(80, 80, 80, props.nrOfFaces, props.nrOfFaces, props.nrOfFaces).toNonIndexed();\r\n\r\n        let colors = [];\r\n        const totalTriangles = props.nrOfFaces * props.nrOfFaces * 2 * 6;\r\n        for (let i = 0; i < totalTriangles; i++) {\r\n            let r = Math.random() * 255;\r\n            let g = Math.random() * 255;\r\n            let b = Math.random() * 255;\r\n            //For each vertex in triangle\r\n            for (let j = 0; j < 3; j++) {\r\n                colors.push(r);\r\n                colors.push(g);\r\n                colors.push(b);\r\n            }\r\n        }\r\n\r\n        let colorsArr = new Uint8Array(colors);\r\n\r\n        boxGeometry.setAttribute('color', new THREE.BufferAttribute(colorsArr, 3, true));\r\n        boxGeometry.attributes.color.needsUpdate = true;\r\n\r\n        return [boxGeometry];\r\n    }, [props.nrOfFaces]);\r\n\r\n    return (\r\n        <group>\r\n            { boxGeometry !== undefined && <mesh geometry={boxGeometry} position={[-100, 50, 0]}>\r\n                <meshBasicMaterial vertexColors={THREE.VertexColors}></meshBasicMaterial>\r\n            </mesh>}\r\n        </group>\r\n    )\r\n}\r\n\r\nfunction NonIndexedVertexColors(props) {\r\n    let { scene } = useThree();\r\n\r\n    let [boxGeometry] = useMemo(() => {\r\n        //If it is indexed, the vertices indexes are re-used between triangles.\r\n        //We'll use it like this so we can give different colors to each triangle\r\n        let boxGeometry = new THREE.BoxBufferGeometry(80, 80, 80, props.nrOfFaces, props.nrOfFaces, props.nrOfFaces).toNonIndexed();\r\n\r\n        let colors = [];\r\n        const totalTriangles = props.nrOfFaces * props.nrOfFaces * 2 * 6;\r\n        for (let i = 0; i < totalTriangles * 3; i++) {\r\n            let r = Math.random() * 255;\r\n            let g = Math.random() * 255;\r\n            let b = Math.random() * 255;\r\n            colors.push(r);\r\n            colors.push(g);\r\n            colors.push(b);\r\n        }\r\n\r\n        let colorsArr = new Uint8Array(colors);\r\n\r\n        boxGeometry.setAttribute('color', new THREE.BufferAttribute(colorsArr, 3, true));\r\n        boxGeometry.attributes.color.needsUpdate = true;\r\n\r\n        return [boxGeometry];\r\n    }, [props.nrOfFaces, scene]);\r\n\r\n    return (\r\n        <group>\r\n            { boxGeometry !== undefined && <mesh geometry={boxGeometry} position={[0, 50, 0]}>\r\n                <meshBasicMaterial vertexColors={THREE.VertexColors}></meshBasicMaterial>\r\n            </mesh>}\r\n        </group>\r\n    )\r\n}\r\n\r\nfunction RGBColorCube() {\r\n    let { scene } = useThree();\r\n\r\n    let [boxGeometry] = useMemo(() => {\r\n        let size = 80;\r\n        let boxGeometry = new THREE.BoxBufferGeometry(size, size, size, 1, 1, 1);\r\n        let colors = [];\r\n\r\n        console.log(\"geo\", boxGeometry);\r\n        //24 since vertices are reused / indexed now\r\n        for (let i = 0; i < 24*3; i+=3) {\r\n            const x = boxGeometry.getAttribute(\"position\").array[i];\r\n            const y = boxGeometry.getAttribute(\"position\").array[i+1];\r\n            const z = boxGeometry.getAttribute(\"position\").array[i+2];\r\n            colors.push(MathUtils.Clamp(125 + x * 255.0 / size, 0, 255));\r\n            colors.push(MathUtils.Clamp(125 + y * 255.0 / size, 0, 255));\r\n            colors.push(MathUtils.Clamp(125 + z * 255.0 / size, 0, 255));\r\n            console.log(\"x\", x);\r\n            console.log(\"xx\", 125 + x * 255.0 / size);\r\n        }\r\n\r\n        let colorsArr = new Uint8Array(colors);\r\n\r\n        boxGeometry.setAttribute('color', new THREE.BufferAttribute(colorsArr, 3, true));\r\n        boxGeometry.attributes.color.needsUpdate = true;\r\n\r\n        return [boxGeometry];\r\n    }, [scene]);\r\n\r\n    return (\r\n        <group>\r\n            { boxGeometry !== undefined && <mesh geometry={boxGeometry} position={[100, 50, 0]}>\r\n                <meshBasicMaterial vertexColors={THREE.VertexColors}></meshBasicMaterial>\r\n            </mesh>}\r\n        </group>\r\n    )\r\n}\r\n\r\nfunction Geometry() {\r\n    const floorTexture = useLoader(THREE.TextureLoader, floorTex);\r\n    floorTexture.wrapS = floorTexture.wrapT = THREE.RepeatWrapping;\r\n    floorTexture.repeat.set(10, 10);\r\n\r\n    let [nrOfFaces] = useState(3);\r\n\r\n    return (\r\n        <group>\r\n            <NonIndexedFaceColors nrOfFaces={nrOfFaces}></NonIndexedFaceColors>\r\n            <NonIndexedVertexColors nrOfFaces={nrOfFaces}></NonIndexedVertexColors>\r\n            <RGBColorCube></RGBColorCube>\r\n\r\n            {/* Floor */}\r\n            {/* <mesh position={[0, -0.5, 0]} rotation={[-Math.PI / 2, 0, 0]}>\r\n                <planeGeometry attach=\"geometry\" args={[1000, 1000, 1, 1]}></planeGeometry>\r\n                <meshBasicMaterial attach=\"material\" map={floorTexture} args={{ side: THREE.DoubleSide }}></meshBasicMaterial>\r\n            </mesh> */}\r\n\r\n            {/* Sky */}\r\n            <mesh>\r\n                <boxGeometry attach=\"geometry\" args={[10000, 10000, 10000]}></boxGeometry>\r\n                <meshBasicMaterial args={{ color: 0x9990ff, side: BackSide }}></meshBasicMaterial>\r\n            </mesh>\r\n\r\n            <axesHelper args={[100]}></axesHelper>\r\n        </group>\r\n    )\r\n}\r\n\r\nfunction Lights() {\r\n    return (\r\n        <group>\r\n            <pointLight position={[0, 250, 0]} args={[0xffffff]}></pointLight>\r\n            <ambientLight args={[0x111111]}></ambientLight>\r\n        </group>\r\n    );\r\n}\r\n\r\nfunction VertexColorsPage(props) {\r\n\r\n    return (\r\n        <div className=\"wrapper\">\r\n            <Canvas>\r\n                <CameraWrapper />\r\n                <OrbitControls />\r\n                <Lights></Lights>\r\n                <Suspense fallback={null}>\r\n                    <Geometry></Geometry>\r\n                </Suspense>\r\n                <Stats />\r\n            </Canvas>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default VertexColorsPage;\r\n","D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\pages\\basic-examples\\text-3d.js",["210","211","212","213"],"import React, { Suspense, useEffect, useMemo, useRef, useState } from 'react';\r\nimport { Canvas, useLoader, useThree } from 'react-three-fiber';\r\nimport * as THREE from 'three';\r\nimport MyCamera from '../../reusable/CustomCamera';\r\nimport Stats from '../../reusable/Stats';\r\nimport OrbitControls from '../../reusable/OrbitControls';\r\n\r\n//Assets\r\nimport floorTex from '../../assets/textures/checkerboard.jpg';\r\nimport roboto from '../../assets/fonts/Roboto Black_Regular.json';\r\n\r\nfunction CameraWrapper(props) {\r\n    const { scene } = useThree();\r\n\r\n    const OnCameraInit = (cam) => {\r\n        cam.position.set(0, 150, 400);\r\n        cam.lookAt(scene.position);\r\n\r\n        scene.fog = new THREE.FogExp2(0x9999ff, 0.00025);\r\n    };\r\n\r\n    return (\r\n        <MyCamera OnCameraInit={OnCameraInit} fov={45} near={0.01} far={20000}></MyCamera>\r\n    );\r\n}\r\n\r\nfunction Geometry() {\r\n    const floorTexture = useLoader(THREE.TextureLoader, floorTex);\r\n    floorTexture.wrapS = floorTexture.wrapT = THREE.RepeatWrapping;\r\n    floorTexture.repeat.set(10, 10);\r\n\r\n    let textGeom = useRef();\r\n    let textWidth = 25;\r\n\r\n    const font = new THREE.Font(roboto);\r\n    let textSettings = useMemo(() => ({\r\n        font,\r\n        size: 30, height: 4, curveSegments: 3,\r\n        style: \"normal\",\r\n        bevelThickness: 1, bevelSize: 2, bevelEnabled: true,\r\n        material: 0, extrudeMaterial: 1\r\n    }), [font]);\r\n\r\n    \r\n    useEffect(()=>{\r\n        if(textGeom.current === null){\r\n            textWidth = 25;\r\n            return;\r\n        }\r\n        textGeom.current.computeBoundingBox();\r\n        console.log(\"bb\", textGeom.current.boundingBox);\r\n        textWidth = textGeom.current.boundingBox.max.x - textGeom.current.boundingBox.min.x;\r\n    }, [textGeom]);\r\n\r\n    let textMat = useMemo(()=>{\r\n        let multiMat = [\r\n            new THREE.MeshBasicMaterial({color:0xaa0000}),\r\n            new THREE.MeshBasicMaterial({color:0x0000aa}),\r\n        ];\r\n        return new THREE.MeshFaceMaterial(multiMat);\r\n    })\r\n\r\n    return (\r\n        <group>\r\n            <mesh position={[-0.5 * textWidth, 50, 100]} rotation={[-Math.PI/4, 0, 0]} material={textMat}>\r\n                <textGeometry attach=\"geometry\" ref={textGeom} args={[\"Hello World!\", textSettings]}></textGeometry>\r\n            </mesh>\r\n\r\n            {/* Floor */}\r\n            <mesh position={[0, -0.5, 0]} rotation={[-Math.PI / 2, 0, 0]}>\r\n                <planeGeometry attach=\"geometry\" args={[1000, 1000, 1, 1]}></planeGeometry>\r\n                <meshBasicMaterial attach=\"material\" map={floorTexture} args={{ side: THREE.DoubleSide }}></meshBasicMaterial>\r\n            </mesh>\r\n\r\n            {/* Sky */}\r\n            <mesh>\r\n                <boxGeometry attach=\"geometry\" args={[10000, 10000, 10000]}></boxGeometry>\r\n                <meshBasicMaterial args={{ color: 0x9990ff, side: THREE.BackSide }}></meshBasicMaterial>\r\n            </mesh>\r\n\r\n            <axesHelper args={[100]}></axesHelper>\r\n        </group>\r\n    )\r\n}\r\n\r\nfunction Lights() {\r\n    return (\r\n        <group>\r\n            <pointLight position={[0, 250, 0]} args={[0xffffff]}></pointLight>\r\n            <ambientLight args={[0x111111]}></ambientLight>\r\n        </group>\r\n    );\r\n}\r\n\r\n\r\nfunction Text3DPage(props) {\r\n\r\n    return (\r\n        <div className=\"wrapper\">\r\n            <Canvas>\r\n                <CameraWrapper />\r\n                <OrbitControls />\r\n                <Lights></Lights>\r\n                <Suspense fallback={null}>\r\n                    <Geometry></Geometry>\r\n                </Suspense>\r\n                <Stats />\r\n            </Canvas>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Text3DPage;\r\n","D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\pages\\textures\\textures.js",["214","215"],"import React, { Suspense, useEffect, useRef, useMemo } from 'react';\r\nimport { Canvas, useLoader, useThree } from 'react-three-fiber';\r\nimport * as THREE from 'three';\r\nimport MyCamera from '../../reusable/CustomCamera';\r\nimport Stats from '../../reusable/Stats';\r\nimport OrbitControls from '../../reusable/OrbitControls';\r\nimport { SceneUtils } from 'three/examples/jsm/utils/SceneUtils';\r\n\r\n//Assets\r\nimport floorTex from '../../assets/textures/checkerboard.jpg';\r\nimport moonTex from '../../assets/textures/moon.jpg';\r\nimport crateTex from '../../assets/textures/crate.png';\r\n\r\nimport dice1Tex from '../../assets/textures/Dice-Blue-1.png';\r\nimport dice2Tex from '../../assets/textures/Dice-Blue-2.png';\r\nimport dice3Tex from '../../assets/textures/Dice-Blue-3.png';\r\nimport dice4Tex from '../../assets/textures/Dice-Blue-4.png';\r\nimport dice5Tex from '../../assets/textures/Dice-Blue-5.png';\r\nimport dice6Tex from '../../assets/textures/Dice-Blue-6.png';\r\n\r\nfunction CameraWrapper(props) {\r\n    const { scene } = useThree();\r\n\r\n    const OnCameraInit = (cam) => {\r\n        cam.position.set(0, 150, 400);\r\n        cam.lookAt(scene.position);\r\n\r\n        scene.fog = new THREE.FogExp2(0x9999ff, 0.00025);\r\n    };\r\n\r\n    return (\r\n        <MyCamera OnCameraInit={OnCameraInit} fov={45} near={0.01} far={20000}></MyCamera>\r\n    );\r\n}\r\n\r\nfunction Geometry() {\r\n    let groupParent = useRef();\r\n    const floorTexture = useLoader(THREE.TextureLoader, floorTex);\r\n    floorTexture.wrapS = floorTexture.wrapT = THREE.RepeatWrapping;\r\n    floorTexture.repeat.set(10, 10);\r\n\r\n    const moonTexture = useLoader(THREE.TextureLoader, moonTex);\r\n    const crateTexture = useLoader(THREE.TextureLoader, crateTex);\r\n\r\n    const dice1Texture = useLoader(THREE.TextureLoader, dice1Tex);\r\n    const dice2Texture = useLoader(THREE.TextureLoader, dice2Tex);\r\n    const dice3Texture = useLoader(THREE.TextureLoader, dice3Tex);\r\n    const dice4Texture = useLoader(THREE.TextureLoader, dice4Tex);\r\n    const dice5Texture = useLoader(THREE.TextureLoader, dice5Tex);\r\n    const dice6Texture = useLoader(THREE.TextureLoader, dice6Tex);\r\n\r\n    let diceFaceMaterial = useMemo(() => {\r\n        const multiMaterial = [\r\n            new THREE.MeshLambertMaterial({ map: dice1Texture }),\r\n            new THREE.MeshLambertMaterial({ map: dice2Texture }),\r\n            new THREE.MeshLambertMaterial({ map: dice3Texture }),\r\n            new THREE.MeshLambertMaterial({ map: dice4Texture }),\r\n            new THREE.MeshLambertMaterial({ map: dice5Texture }),\r\n            new THREE.MeshLambertMaterial({ map: dice6Texture })\r\n        ];\r\n\r\n             return new THREE.MeshFaceMaterial(multiMaterial)\r\n\r\n    }, [dice1Texture, dice2Texture, dice3Texture, dice4Texture, dice5Texture, dice6Texture]);\r\n\r\n    return (\r\n        <group ref={groupParent}>\r\n            <mesh position={[-100, 50, 0]}>\r\n                <sphereGeometry attach=\"geometry\" args={[40, 32, 16]}></sphereGeometry>\r\n                <meshBasicMaterial attach=\"material\" map={moonTexture}></meshBasicMaterial>\r\n            </mesh>\r\n\r\n            <mesh position={[0, 50, 0]}>\r\n                <sphereGeometry attach=\"geometry\" args={[40, 32, 16]}></sphereGeometry>\r\n                <meshLambertMaterial attach=\"material\" map={moonTexture}></meshLambertMaterial>\r\n            </mesh>\r\n\r\n            <mesh position={[100, 50, 0]}>\r\n                <sphereGeometry attach=\"geometry\" args={[40, 32, 16]}></sphereGeometry>\r\n                <meshLambertMaterial attach=\"material\" map={moonTexture} color={0xff8800} ambientLight={0x0000ff}></meshLambertMaterial>\r\n            </mesh>\r\n\r\n            <mesh position={[-60, 60, -100]}>\r\n                <boxGeometry attach=\"geometry\" args={[85, 85, 85]}></boxGeometry>\r\n                <meshBasicMaterial map={crateTexture}></meshBasicMaterial>\r\n            </mesh>\r\n\r\n            <mesh position={[60, 50, -100]} material={diceFaceMaterial}>\r\n                <boxGeometry attach=\"geometry\" args={[85, 85, 85]}></boxGeometry>\r\n            </mesh>\r\n\r\n            {/* Lightbulb */}\r\n            <mesh position={[0, 150, 0]}>\r\n                <sphereGeometry attach=\"geometry\" args={[10, 16, 8]}></sphereGeometry>\r\n                <meshBasicMaterial attach=\"material\" color={0xffaa00}></meshBasicMaterial>\r\n            </mesh>\r\n\r\n\r\n            {/* Floor */}\r\n            <mesh position={[0, -0.5, 0]} rotation={[-Math.PI / 2, 0, 0]}>\r\n                <planeGeometry attach=\"geometry\" args={[1000, 1000, 1, 1]}></planeGeometry>\r\n                <meshBasicMaterial attach=\"material\" map={floorTexture} args={{ side: THREE.DoubleSide }}></meshBasicMaterial>\r\n            </mesh>\r\n\r\n            {/* Sky */}\r\n            <mesh>\r\n                <boxGeometry attach=\"geometry\" args={[10000, 10000, 10000]}></boxGeometry>\r\n                <meshBasicMaterial args={{ color: 0x9990ff, side: THREE.BackSide }}></meshBasicMaterial>\r\n            </mesh>\r\n\r\n            <axesHelper args={[100]}></axesHelper>\r\n        </group>\r\n    )\r\n}\r\n\r\nfunction Lights() {\r\n    return (\r\n        <group>\r\n            <pointLight position={[0, 150, 0]} args={[0xffffff]}></pointLight>\r\n            <ambientLight args={[0x444444]}></ambientLight>\r\n        </group>\r\n    );\r\n}\r\n\r\n\r\nfunction TexturesPage(props) {\r\n\r\n    return (\r\n        <div className=\"wrapper\">\r\n            <Canvas>\r\n                <CameraWrapper />\r\n                <OrbitControls />\r\n                <Lights></Lights>\r\n                <Suspense fallback={null}>\r\n                    <Geometry></Geometry>\r\n                </Suspense>\r\n                <Stats />\r\n            </Canvas>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TexturesPage;\r\n","D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\pages\\textures\\textures-repeat.js",[],"D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\pages\\textures\\texture-text-3d.js",["216","217","218","219"],"import React, { Suspense, useEffect, useMemo, useRef, useState } from 'react';\r\nimport { Canvas, useLoader, useThree } from 'react-three-fiber';\r\nimport * as THREE from 'three';\r\nimport MyCamera from '../../reusable/CustomCamera';\r\nimport Stats from '../../reusable/Stats';\r\nimport OrbitControls from '../../reusable/OrbitControls';\r\n\r\n//Assets\r\nimport floorTex from '../../assets/textures/checkerboard.jpg';\r\nimport roboto from '../../assets/fonts/Roboto Black_Regular.json';\r\n\r\nimport lavaTex from '../../assets/textures/lava.jpg';\r\nimport chromeTex from '../../assets/textures/Chrome.png';\r\n\r\nfunction CameraWrapper(props) {\r\n    const { scene } = useThree();\r\n\r\n    const OnCameraInit = (cam) => {\r\n        cam.position.set(0, 150, 400);\r\n        cam.lookAt(scene.position);\r\n\r\n        scene.fog = new THREE.FogExp2(0x9999ff, 0.00025);\r\n    };\r\n\r\n    return (\r\n        <MyCamera OnCameraInit={OnCameraInit} fov={45} near={0.01} far={20000}></MyCamera>\r\n    );\r\n}\r\n\r\nfunction Geometry() {\r\n    const floorTexture = useLoader(THREE.TextureLoader, floorTex);\r\n    floorTexture.wrapS = floorTexture.wrapT = THREE.RepeatWrapping;\r\n    floorTexture.repeat.set(10, 10);\r\n\r\n    const lavaTexture = useLoader(THREE.TextureLoader, lavaTex);\r\n    const chromeTexture = useLoader(THREE.TextureLoader, chromeTex);\r\n    lavaTexture.wrapS = lavaTexture.wrapT = THREE.RepeatWrapping;\r\n    lavaTexture.repeat.set(0.05, 0.05);\r\n    chromeTexture.wrapS = chromeTexture.wrapT = THREE.RepeatWrapping;\r\n    chromeTexture.repeat.set(0.5, 0.5);\r\n\r\n    let textGeom = useRef();\r\n    let textWidth = 25;\r\n\r\n    const font = new THREE.Font(roboto);\r\n    let textSettings = useMemo(() => ({\r\n        font,\r\n        size: 30, height: 4, curveSegments: 3,\r\n        style: \"normal\",\r\n        bevelThickness: 2, bevelSize: 1, bevelEnabled: true,\r\n        material: 0, extrudeMaterial: 1\r\n    }), [font]);\r\n\r\n    \r\n    useEffect(()=>{\r\n        if(textGeom.current === null){\r\n            textWidth = 25;\r\n            return;\r\n        }\r\n        textGeom.current.computeBoundingBox();\r\n        console.log(\"bb\", textGeom.current.boundingBox);\r\n        textWidth = textGeom.current.boundingBox.max.x - textGeom.current.boundingBox.min.x;\r\n    }, [textGeom]);\r\n\r\n    let textMat = useMemo(()=>{\r\n        let multiMat = [\r\n            new THREE.MeshBasicMaterial({map:lavaTexture}),\r\n            new THREE.MeshBasicMaterial({map:chromeTexture}),\r\n        ];\r\n        return new THREE.MeshFaceMaterial(multiMat);\r\n    })\r\n\r\n    return (\r\n        <group>\r\n            <mesh position={[-0.5 * textWidth, 50, 100]} rotation={[-Math.PI/4, 0, 0]} material={textMat}>\r\n                <textGeometry attach=\"geometry\" ref={textGeom} args={[\"Hello World!\", textSettings]}></textGeometry>\r\n            </mesh>\r\n\r\n            {/* Floor */}\r\n            <mesh position={[0, -0.5, 0]} rotation={[-Math.PI / 2, 0, 0]}>\r\n                <planeGeometry attach=\"geometry\" args={[1000, 1000, 1, 1]}></planeGeometry>\r\n                <meshBasicMaterial attach=\"material\" map={floorTexture} args={{ side: THREE.DoubleSide }}></meshBasicMaterial>\r\n            </mesh>\r\n\r\n            {/* Sky */}\r\n            <mesh>\r\n                <boxGeometry attach=\"geometry\" args={[10000, 10000, 10000]}></boxGeometry>\r\n                <meshBasicMaterial args={{ color: 0x9990ff, side: THREE.BackSide }}></meshBasicMaterial>\r\n            </mesh>\r\n\r\n            <axesHelper args={[100]}></axesHelper>\r\n        </group>\r\n    )\r\n}\r\n\r\nfunction Lights() {\r\n    return (\r\n        <group>\r\n            <pointLight position={[0, 250, 0]} args={[0xffffff]}></pointLight>\r\n            <ambientLight args={[0x111111]}></ambientLight>\r\n        </group>\r\n    );\r\n}\r\n\r\n\r\nfunction TextureText3DPage(props) {\r\n\r\n    return (\r\n        <div className=\"wrapper\">\r\n            <Canvas>\r\n                <CameraWrapper />\r\n                <OrbitControls />\r\n                <Lights></Lights>\r\n                <Suspense fallback={null}>\r\n                    <Geometry></Geometry>\r\n                </Suspense>\r\n                <Stats />\r\n            </Canvas>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TextureText3DPage;\r\n","D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\pages\\textures\\translucence.js",[],"D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\pages\\textures\\shadow.js",[],"D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\pages\\textures\\skybox.js",["220","221","222"],"import React, { Suspense, useEffect, useMemo } from 'react';\r\nimport { Canvas, useLoader, useThree } from 'react-three-fiber';\r\nimport * as THREE from 'three';\r\n\r\nimport MyCamera from '../../reusable/CustomCamera';\r\nimport Stats from '../../reusable/Stats';\r\nimport OrbitControls from '../../reusable/OrbitControls';\r\n\r\nimport { DoubleSide, TextureLoader, RepeatWrapping, BackSide, FogExp2, Texture } from \"three\";\r\n\r\nimport floorTex from '../../assets/textures/checkerboard.jpg';\r\n\r\nimport skyboxXPos from '../../assets/textures/dawnmountain-xpos.png';\r\nimport skyboxXNeg from '../../assets/textures/dawnmountain-xneg.png';\r\nimport skyboxYPos from '../../assets/textures/dawnmountain-ypos.png';\r\nimport skyboxYNeg from '../../assets/textures/dawnmountain-yneg.png';\r\nimport skyboxZPos from '../../assets/textures/dawnmountain-zpos.png';\r\nimport skyboxZNeg from '../../assets/textures/dawnmountain-zneg.png';\r\n\r\nfunction CameraWrapper(props) {\r\n    const { scene } = useThree();\r\n\r\n    const OnCameraInit = (cam) => {\r\n        cam.position.set(0, 150, 400);\r\n        cam.lookAt(scene.position);\r\n\r\n        scene.fog = new FogExp2(0x9999ff, 0.00025);\r\n    };\r\n\r\n    return (\r\n        <MyCamera OnCameraInit={OnCameraInit} fov={45} near={0.01} far={20000}></MyCamera>\r\n    );\r\n}\r\n\r\nfunction Geometry() {\r\n    const floorTexture = useLoader(TextureLoader, floorTex);\r\n    floorTexture.wrapS = floorTexture.wrapT = RepeatWrapping;\r\n    floorTexture.repeat.set(10, 10);\r\n\r\n    let textures = [];\r\n    textures.push(useLoader(TextureLoader, skyboxXPos));\r\n    textures.push(useLoader(TextureLoader, skyboxXNeg));\r\n    textures.push(useLoader(TextureLoader, skyboxYPos));\r\n    textures.push(useLoader(TextureLoader, skyboxYNeg));\r\n    textures.push(useLoader(TextureLoader, skyboxZPos));\r\n    textures.push(useLoader(TextureLoader, skyboxZNeg));\r\n\r\n    //When used MeshFaceMaterial as jsx it acted as a simple material\r\n    //Puting the same image on all faces :-?\r\n    let mat = useMemo(() => {\r\n        let materialArray = [];\r\n        for (let i = 0; i < textures.length; i++) {\r\n            materialArray.push(new THREE.MeshBasicMaterial({\r\n                map: textures[i],\r\n                side: THREE.BackSide\r\n            }));\r\n        }\r\n        return materialArray;\r\n    }, [textures]);\r\n    return (\r\n        <group>\r\n\r\n            <mesh material={mat}>\r\n                <boxGeometry attach=\"geometry\" args={[5000, 5000, 5000]}></boxGeometry>\r\n            </mesh>\r\n\r\n            {/* Floor */}\r\n            <mesh position={[0, -0.5, 0]} rotation={[-Math.PI / 2, 0, 0]}>\r\n                <planeGeometry attach=\"geometry\" args={[1000, 1000, 1, 1]}></planeGeometry>\r\n                <meshBasicMaterial attach=\"material\" map={floorTexture} args={{ side: DoubleSide }}></meshBasicMaterial>\r\n            </mesh>\r\n\r\n            {/* Sky */}\r\n            <mesh>\r\n                <boxGeometry attach=\"geometry\" args={[10000, 10000, 10000]}></boxGeometry>\r\n                <meshBasicMaterial args={{ color: 0x9990ff, side: BackSide }}></meshBasicMaterial>\r\n            </mesh>\r\n\r\n            <axesHelper args={[100]}></axesHelper>\r\n        </group>\r\n    )\r\n}\r\n\r\nfunction Lights() {\r\n    return (\r\n        <group>\r\n            <pointLight position={[0, 250, 0]} args={[0xffffff]}></pointLight>\r\n            <ambientLight args={[0x111111]}></ambientLight>\r\n        </group>\r\n    );\r\n}\r\n\r\n\r\nfunction SkyboxPage(props) {\r\n\r\n    return (\r\n        <div className=\"wrapper\">\r\n            <Canvas>\r\n                <CameraWrapper />\r\n                <OrbitControls />\r\n                <Lights></Lights>\r\n                <Suspense fallback={null}>\r\n                    <Geometry></Geometry>\r\n                </Suspense>\r\n                <Stats />\r\n            </Canvas>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SkyboxPage;\r\n","D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\pages\\textures\\reflection.js",["223","224"],"import React, { Suspense, useEffect, useMemo, useRef, useState } from 'react';\r\nimport { Canvas, useFrame, useLoader, useThree } from 'react-three-fiber';\r\nimport * as THREE from 'three';\r\n\r\nimport MyCamera from '../../reusable/CustomCamera';\r\nimport Stats from '../../reusable/Stats';\r\nimport OrbitControls from '../../reusable/OrbitControls';\r\n\r\nimport { DoubleSide, TextureLoader, RepeatWrapping, BackSide, FogExp2, Texture } from \"three\";\r\n\r\nimport floorTex from '../../assets/textures/checkerboard.jpg';\r\n\r\nimport skyboxXPos from '../../assets/textures/dawnmountain-xpos.png';\r\nimport skyboxXNeg from '../../assets/textures/dawnmountain-xneg.png';\r\nimport skyboxYPos from '../../assets/textures/dawnmountain-ypos.png';\r\nimport skyboxYNeg from '../../assets/textures/dawnmountain-yneg.png';\r\nimport skyboxZPos from '../../assets/textures/dawnmountain-zpos.png';\r\nimport skyboxZNeg from '../../assets/textures/dawnmountain-zneg.png';\r\n\r\nfunction CameraWrapper(props) {\r\n    const { scene } = useThree();\r\n\r\n    const OnCameraInit = (cam) => {\r\n        cam.position.set(0, 150, 400);\r\n        cam.lookAt(scene.position);\r\n\r\n        scene.fog = new FogExp2(0x9999ff, 0.00025);\r\n    };\r\n\r\n    return (\r\n        <MyCamera OnCameraInit={OnCameraInit} fov={45} near={0.01} far={20000}></MyCamera>\r\n    );\r\n}\r\n\r\nfunction Geometry() {\r\n    const floorTexture = useLoader(TextureLoader, floorTex);\r\n    useEffect(() => {\r\n        floorTexture.wrapS = floorTexture.wrapT = RepeatWrapping;\r\n        floorTexture.repeat.set(10, 10);\r\n    }, [floorTexture]);\r\n\r\n    let textures = [];\r\n    textures.push(useLoader(TextureLoader, skyboxXPos));\r\n    textures.push(useLoader(TextureLoader, skyboxXNeg));\r\n    textures.push(useLoader(TextureLoader, skyboxYPos));\r\n    textures.push(useLoader(TextureLoader, skyboxYNeg));\r\n    textures.push(useLoader(TextureLoader, skyboxZPos));\r\n    textures.push(useLoader(TextureLoader, skyboxZNeg));\r\n\r\n    // When used MeshFaceMaterial as jsx it acted as a simple material\r\n    // Puting the same image on all faces :-?\r\n    let mat = useMemo(() => {\r\n        let materialArray = [];\r\n        for (let i = 0; i < textures.length; i++) {\r\n            materialArray.push(new THREE.MeshBasicMaterial({\r\n                map: textures[i],\r\n                side: THREE.BackSide\r\n            }));\r\n        }\r\n        return materialArray;\r\n    }, [textures]);\r\n\r\n    let cubeEnvMap = useRef();\r\n    let mirrorCube = useRef();\r\n    let sphereEnvMap = useRef();\r\n    let mirrorSphere = useRef();\r\n\r\n    //If encoding different from renderer encoding, it will convert each frame and become laggy for more then one cubemap\r\n    //https://threejs.org/examples/webgl_materials_cubemap_dynamic.html\r\n    const [renderTarget] = useState(new THREE.WebGLCubeRenderTarget(512, { format: THREE.RGBFormat, generateMipmaps: true, encoding: THREE.sRGBEncoding }));\r\n    const [sphereRenderTarget] = useState(new THREE.WebGLCubeRenderTarget(512, { format: THREE.RGBFormat, generateMipmaps: true, encoding: THREE.sRGBEncoding}));\r\n    useFrame(({ gl, scene }) => {\r\n        mirrorCube.current.visible = false;\r\n        mirrorSphere.current.visible = false;\r\n        cubeEnvMap.current.update(gl, scene);\r\n        sphereEnvMap.current.update(gl, scene);\r\n        mirrorCube.current.visible = true;\r\n        mirrorSphere.current.visible = true;\r\n    });\r\n\r\n\r\n    return (\r\n        <group>\r\n            <mesh ref={mirrorCube} position={[-75, 50, 0]}>\r\n                <boxGeometry target=\"geometry\" args={[100, 100, 10, 1, 1, 1]}></boxGeometry>\r\n                <meshBasicMaterial target=\"material\" envMap={renderTarget.texture} ></meshBasicMaterial>\r\n            </mesh>\r\n\r\n            <cubeCamera ref={cubeEnvMap} position={[-75, 50, 0]} args={[0.1, 5000, renderTarget]}></cubeCamera>\r\n\r\n            <mesh ref={mirrorSphere} position={[75, 50, 0]}>\r\n                <sphereGeometry target=\"geometry\" args={[50, 32, 16]}></sphereGeometry>\r\n                <meshBasicMaterial target=\"material\" envMap={renderTarget.texture} ></meshBasicMaterial>\r\n            </mesh>\r\n            <cubeCamera ref={sphereEnvMap} position={[75, 50, 0]} args={[0.1, 5000, sphereRenderTarget]}></cubeCamera>\r\n            {/* Skybox */}\r\n            <mesh material={mat}>\r\n                <boxGeometry attach=\"geometry\" args={[5000, 5000, 5000]}></boxGeometry>\r\n            </mesh>\r\n\r\n            {/* Floor */}\r\n            <mesh position={[0, -0.5, 0]} rotation={[-Math.PI / 2, 0, 0]}>\r\n                <planeGeometry attach=\"geometry\" args={[1000, 1000, 1, 1]}></planeGeometry>\r\n                <meshBasicMaterial attach=\"material\" map={floorTexture} args={{ side: DoubleSide }}></meshBasicMaterial>\r\n            </mesh>\r\n\r\n            {/* Sky */}\r\n            <mesh>\r\n                <boxGeometry attach=\"geometry\" args={[10000, 10000, 10000]}></boxGeometry>\r\n                <meshBasicMaterial args={{ color: 0x9990ff, side: BackSide }}></meshBasicMaterial>\r\n            </mesh>\r\n\r\n            <axesHelper args={[100]}></axesHelper>\r\n        </group>\r\n    )\r\n}\r\n\r\nfunction Lights() {\r\n    return (\r\n        <group>\r\n            <pointLight position={[0, 250, 0]} args={[0xffffff]}></pointLight>\r\n            <ambientLight args={[0x111111]}></ambientLight>\r\n        </group>\r\n    );\r\n}\r\n\r\n\r\nfunction ReflectionPage(props) {\r\n    return (\r\n        <div className=\"wrapper\">\r\n            <Canvas>\r\n                <CameraWrapper />\r\n                <OrbitControls />\r\n                <Lights></Lights>\r\n                <Suspense fallback={null}>\r\n                    <Geometry></Geometry>\r\n                </Suspense>\r\n                <Stats />\r\n            </Canvas>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ReflectionPage;\r\n","D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\pages\\textures\\refraction.js",["225","226","227","228","229"],"import React, { Suspense, useContext, useEffect, useMemo, useRef, useState } from 'react';\r\nimport { Canvas, render, useFrame, useLoader, useThree } from 'react-three-fiber';\r\nimport * as THREE from 'three';\r\n\r\nimport DatGui, { DatNumber } from '@tim-soft/react-dat-gui';\r\n\r\nimport MyCamera from '../../reusable/CustomCamera';\r\nimport Stats from '../../reusable/Stats';\r\nimport OrbitControls from '../../reusable/OrbitControls';\r\n\r\nimport { DoubleSide, TextureLoader, RepeatWrapping, BackSide, FogExp2, Texture } from \"three\";\r\n\r\nimport { DatGuiContext } from '../../reusable/DatGuiContext';\r\n\r\nimport floorTex from '../../assets/textures/checkerboard.jpg';\r\n\r\nimport skyboxXPos from '../../assets/textures/dawnmountain-xpos.png';\r\nimport skyboxXNeg from '../../assets/textures/dawnmountain-xneg.png';\r\nimport skyboxYPos from '../../assets/textures/dawnmountain-ypos.png';\r\nimport skyboxYNeg from '../../assets/textures/dawnmountain-yneg.png';\r\nimport skyboxZPos from '../../assets/textures/dawnmountain-zpos.png';\r\nimport skyboxZNeg from '../../assets/textures/dawnmountain-zneg.png';\r\n\r\nfunction CameraWrapper(props) {\r\n    const { scene } = useThree();\r\n\r\n    const OnCameraInit = (cam) => {\r\n        cam.position.set(0, 150, 400);\r\n        cam.lookAt(scene.position);\r\n\r\n        scene.fog = new FogExp2(0x9999ff, 0.00025);\r\n    };\r\n\r\n    return (\r\n        <MyCamera OnCameraInit={OnCameraInit} fov={45} near={0.01} far={20000}></MyCamera>\r\n    );\r\n}\r\n\r\nfunction ReflectiveSphere(props) {\r\n    let cubeMap = useRef();\r\n    let mirrorSphere = useRef();\r\n    const [renderTarget] = useState(new THREE.WebGLCubeRenderTarget(512, { format: THREE.RGBFormat, generateMipmaps: true, encoding: THREE.sRGBEncoding }));\r\n    useEffect(() => {\r\n        cubeMap.current.renderTarget.texture.mapping = THREE.CubeRefractionMapping;\r\n    }, [cubeMap]);\r\n    useFrame(({ gl, scene }) => {\r\n        mirrorSphere.current.visible = false;\r\n        cubeMap.current.update(gl, scene);\r\n        mirrorSphere.current.visible = true;\r\n    });\r\n\r\n    return (\r\n        <group>\r\n            <mesh ref={mirrorSphere} position={[0, 50, 0]}>\r\n                <sphereGeometry args={[80, 64, 32]}></sphereGeometry>\r\n                <meshBasicMaterial color={[0xccccff]} envMap={renderTarget.texture} refractionRatio={props.data.refractionRatio} reflectivity={props.data.reflectivity}></meshBasicMaterial>\r\n            </mesh>\r\n\r\n            <cubeCamera position={[0, 50, 0]} ref={cubeMap} args={[0.1, 5000, renderTarget]}></cubeCamera>\r\n        </group>\r\n    )\r\n}\r\nfunction Geometry(props) {\r\n    const floorTexture = useLoader(TextureLoader, floorTex);\r\n    floorTexture.wrapS = floorTexture.wrapT = RepeatWrapping;\r\n    floorTexture.repeat.set(10, 10);\r\n\r\n    let textures = [];\r\n    textures.push(useLoader(TextureLoader, skyboxXPos));\r\n    textures.push(useLoader(TextureLoader, skyboxXNeg));\r\n    textures.push(useLoader(TextureLoader, skyboxYPos));\r\n    textures.push(useLoader(TextureLoader, skyboxYNeg));\r\n    textures.push(useLoader(TextureLoader, skyboxZPos));\r\n    textures.push(useLoader(TextureLoader, skyboxZNeg));\r\n\r\n    // // When used MeshFaceMaterial as jsx it acted as a simple material\r\n    // // Puting the same image on all faces :-?\r\n    let mat = useMemo(() => {\r\n        let materialArray = [];\r\n        for (let i = 0; i < textures.length; i++) {\r\n            materialArray.push(new THREE.MeshBasicMaterial({\r\n                map: textures[i],\r\n                side: THREE.BackSide\r\n            }));\r\n        }\r\n        return materialArray;\r\n    }, [textures]);\r\n\r\n    return (\r\n        <group>\r\n            <ReflectiveSphere data={props.data}></ReflectiveSphere>\r\n            {/* Skybox */}\r\n            <mesh material={mat}>\r\n                <boxGeometry attach=\"geometry\" args={[5000, 5000, 5000]}></boxGeometry>\r\n            </mesh>\r\n\r\n            {/* Floor */}\r\n            <mesh position={[0, -0.5, 0]} rotation={[-Math.PI / 2, 0, 0]}>\r\n                <planeGeometry attach=\"geometry\" args={[1000, 1000, 1, 1]}></planeGeometry>\r\n                <meshBasicMaterial attach=\"material\" map={floorTexture}></meshBasicMaterial>\r\n            </mesh>\r\n\r\n            <axesHelper args={[100]}></axesHelper>\r\n        </group>\r\n    )\r\n}\r\n\r\nfunction Lights() {\r\n    return (\r\n        <group>\r\n            <pointLight position={[0, 250, 0]} args={[0xffffff]}></pointLight>\r\n            <ambientLight args={[0x111111]}></ambientLight>\r\n        </group>\r\n    );\r\n}\r\n\r\n\r\nfunction GuiControls(props) {\r\n    const [contextData, setContextData] = useContext(DatGuiContext);\r\n    return (\r\n        <div style={{ position: \"absolute\", top: 0, right: 0 }}>\r\n            <DatGui data={contextData} onUpdate={setContextData}>\r\n                <DatNumber path=\"refractionRatio\" min={0} max={1} step={0.01}></DatNumber>\r\n                <DatNumber path=\"reflectivity\" min={0.6} max={1} step={0.01}></DatNumber>\r\n            </DatGui>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction RefractionPage(props) {\r\n    const [data, setData] = useState({ refractionRatio: 0.99, reflectivity: 0.9 });\r\n    return (\r\n        <div className=\"wrapper\">\r\n            <DatGuiContext.Provider value={[data, setData]}>\r\n                <Canvas>\r\n                    <CameraWrapper />\r\n                    <OrbitControls />\r\n                    <Lights></Lights>\r\n                    <Suspense fallback={null}>\r\n                        <Geometry data={data}></Geometry>\r\n                    </Suspense>\r\n                    <Stats />\r\n                </Canvas>\r\n                <GuiControls></GuiControls>\r\n            </DatGuiContext.Provider>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RefractionPage;\r\n","D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\pages\\textures\\bubble.js",["230","231"],"import React, { Suspense, useEffect, useMemo, useRef, useState } from 'react';\r\nimport { Canvas, useFrame, useLoader, useThree } from 'react-three-fiber';\r\nimport * as THREE from 'three';\r\nimport { FresnelShader } from 'three/examples/jsm/shaders/FresnelShader';\r\n\r\nimport MyCamera from '../../reusable/CustomCamera';\r\nimport Stats from '../../reusable/Stats';\r\nimport OrbitControls from '../../reusable/OrbitControls';\r\n\r\nimport { DoubleSide, TextureLoader, RepeatWrapping, BackSide, FogExp2, Texture } from \"three\";\r\n\r\nimport floorTex from '../../assets/textures/checkerboard.jpg';\r\n\r\nimport skyboxXPos from '../../assets/textures/dawnmountain-xpos.png';\r\nimport skyboxXNeg from '../../assets/textures/dawnmountain-xneg.png';\r\nimport skyboxYPos from '../../assets/textures/dawnmountain-ypos.png';\r\nimport skyboxYNeg from '../../assets/textures/dawnmountain-yneg.png';\r\nimport skyboxZPos from '../../assets/textures/dawnmountain-zpos.png';\r\nimport skyboxZNeg from '../../assets/textures/dawnmountain-zneg.png';\r\n\r\nfunction CameraWrapper(props) {\r\n    const { scene } = useThree();\r\n\r\n    const OnCameraInit = (cam) => {\r\n        cam.position.set(0, 150, 400);\r\n        cam.lookAt(scene.position);\r\n\r\n        scene.fog = new FogExp2(0x9999ff, 0.00025);\r\n    };\r\n\r\n    return (\r\n        <MyCamera OnCameraInit={OnCameraInit} fov={45} near={0.01} far={20000}></MyCamera>\r\n    );\r\n}\r\n\r\nfunction Geometry() {\r\n    //If encoding different from renderer encoding, it will convert each frame and become laggy for more then one cubemap\r\n    //https://threejs.org/examples/webgl_materials_cubemap_dynamic.html\r\n    const [sphereRenderTarget] = useState(new THREE.WebGLCubeRenderTarget(512, { format: THREE.RGBFormat, generateMipmaps: true, encoding: THREE.sRGBEncoding }));\r\n\r\n\r\n    const floorTexture = useLoader(TextureLoader, floorTex);\r\n    useEffect(() => {\r\n        floorTexture.wrapS = floorTexture.wrapT = RepeatWrapping;\r\n        floorTexture.repeat.set(10, 10);\r\n    }, [floorTexture]);\r\n\r\n    let textures = [];\r\n    textures.push(useLoader(TextureLoader, skyboxXPos));\r\n    textures.push(useLoader(TextureLoader, skyboxXNeg));\r\n    textures.push(useLoader(TextureLoader, skyboxYPos));\r\n    textures.push(useLoader(TextureLoader, skyboxYNeg));\r\n    textures.push(useLoader(TextureLoader, skyboxZPos));\r\n    textures.push(useLoader(TextureLoader, skyboxZNeg));\r\n\r\n    // When used MeshFaceMaterial as jsx it acted as a simple material\r\n    // Puting the same image on all faces :-?\r\n    let mat = useMemo(() => {\r\n        let materialArray = [];\r\n        for (let i = 0; i < textures.length; i++) {\r\n            materialArray.push(new THREE.MeshBasicMaterial({\r\n                map: textures[i],\r\n                side: THREE.BackSide\r\n            }));\r\n        }\r\n        return materialArray;\r\n    }, [textures]);\r\n\r\n    let sphereEnvMap = useRef();\r\n    let mirrorSphere = useRef();\r\n\r\n    let fresnelMat = useMemo(() => {\r\n        let fShader = FresnelShader;\r\n        let fresnelUniforms =\r\n        {\r\n            \"mRefractionRatio\": { type: \"f\", value: 1.02 },\r\n            \"mFresnelBias\": { type: \"f\", value: 0.1 },\r\n            \"mFresnelPower\": { type: \"f\", value: 2.0 },\r\n            \"mFresnelScale\": { type: \"f\", value: 1.0 },\r\n            \"tCube\": { type: \"t\", value: sphereRenderTarget } //  textureCube }\r\n        };\r\n\r\n        return new THREE.ShaderMaterial(\r\n            {\r\n                uniforms: fresnelUniforms,\r\n                vertexShader: fShader.vertexShader,\r\n                fragmentShader: fShader.fragmentShader\r\n            }\r\n        );\r\n    }, [sphereRenderTarget]);\r\n\r\n    useFrame(({ gl, scene }) => {\r\n        mirrorSphere.current.visible = false;\r\n        sphereEnvMap.current.update(gl, scene);\r\n        mirrorSphere.current.visible = true;\r\n    });\r\n\r\n\r\n    return (\r\n        <group>\r\n\r\n            <mesh ref={mirrorSphere} position={[75, 50, 0]} material={fresnelMat}>\r\n                <sphereGeometry target=\"geometry\" args={[50, 32, 16]}></sphereGeometry>\r\n                {/* <meshBasicMaterial target=\"material\" envMap={sphereRenderTarget.texture} ></meshBasicMaterial> */}\r\n            </mesh>\r\n            <cubeCamera ref={sphereEnvMap} position={[75, 50, 0]} args={[0.1, 5000, sphereRenderTarget]}></cubeCamera>\r\n            {/* Skybox */}\r\n            <mesh material={mat}>\r\n                <boxGeometry attach=\"geometry\" args={[5000, 5000, 5000]}></boxGeometry>\r\n            </mesh>\r\n\r\n            {/* Floor */}\r\n            <mesh position={[0, -0.5, 0]} rotation={[-Math.PI / 2, 0, 0]}>\r\n                <planeGeometry attach=\"geometry\" args={[1000, 1000, 1, 1]}></planeGeometry>\r\n                <meshBasicMaterial attach=\"material\" map={floorTexture} args={{ side: DoubleSide }}></meshBasicMaterial>\r\n            </mesh>\r\n\r\n            {/* Sky */}\r\n            <mesh>\r\n                <boxGeometry attach=\"geometry\" args={[10000, 10000, 10000]}></boxGeometry>\r\n                <meshBasicMaterial args={{ color: 0x9990ff, side: BackSide }}></meshBasicMaterial>\r\n            </mesh>\r\n\r\n            <axesHelper args={[100]}></axesHelper>\r\n        </group>\r\n    )\r\n}\r\n\r\nfunction Lights() {\r\n    return (\r\n        <group>\r\n            <pointLight position={[0, 250, 0]} args={[0xffffff]}></pointLight>\r\n            <ambientLight args={[0x111111]}></ambientLight>\r\n        </group>\r\n    );\r\n}\r\n\r\n\r\nfunction BubblePage(props) {\r\n    return (\r\n        <div className=\"wrapper\">\r\n            <Canvas>\r\n                <CameraWrapper />\r\n                <OrbitControls />\r\n                <Lights></Lights>\r\n                <Suspense fallback={null}>\r\n                    <Geometry></Geometry>\r\n                </Suspense>\r\n                <Stats />\r\n            </Canvas>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default BubblePage;\r\n","D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\pages\\textures\\texture-from-canvas.js",["232","233"],"import React, { Suspense, useEffect, useRef, useMemo } from 'react';\r\nimport { Canvas, useLoader, useThree } from 'react-three-fiber';\r\nimport * as THREE from 'three';\r\n\r\nimport MyCamera from '../../reusable/CustomCamera';\r\nimport Stats from '../../reusable/Stats';\r\nimport OrbitControls from '../../reusable/OrbitControls';\r\n\r\nimport { DoubleSide, TextureLoader, RepeatWrapping, BackSide, FogExp2 } from \"three\";\r\n\r\nimport floorTex from '../../assets/textures/checkerboard.jpg';\r\nimport diceTex from '../../assets/textures/Dice-Blue-1.png';\r\n\r\nfunction CameraWrapper(props) {\r\n    const { scene } = useThree();\r\n\r\n    const OnCameraInit = (cam) => {\r\n        cam.position.set(0, 150, 400);\r\n        cam.lookAt(scene.position);\r\n\r\n        scene.fog = new FogExp2(0x9999ff, 0.00025);\r\n    };\r\n\r\n    return (\r\n        <MyCamera OnCameraInit={OnCameraInit} fov={45} near={0.01} far={20000}></MyCamera>\r\n    );\r\n}\r\n\r\nfunction Canvas2D() {\r\n    let parentRef = useRef();\r\n\r\n    //Text Canvas\r\n    let [mat1, canvas1] = useMemo(() => {\r\n        const canvas = document.createElement(\"canvas\");\r\n        const ctx = canvas.getContext('2d');\r\n        ctx.font = \"Bold 40px Arial\";\r\n        ctx.fillStyle = \"rgba(255, 0, 0, 0.95)\";\r\n        ctx.fillText('Hello World!', 0, 50);\r\n\r\n        let tex = new THREE.Texture(canvas);\r\n        tex.needsUpdate = true;\r\n        return [new THREE.MeshBasicMaterial({ map: tex, side: THREE.DoubleSide, transparent: true }), canvas];\r\n    });\r\n\r\n    //Image Canvas\r\n    let [mat2, canvas2] = useMemo(() => {\r\n        const canvas = document.createElement(\"canvas\");\r\n        const ctx = canvas.getContext(\"2d\");\r\n\r\n        const tex = new THREE.Texture(canvas);\r\n        tex.needsUpdate = true;\r\n\r\n        var imageObj = new Image();\r\n        imageObj.src = diceTex;\r\n        imageObj.onload = () => {\r\n            ctx.drawImage(imageObj, 0, 0);\r\n            if (tex) {\r\n                tex.needsUpdate = true;\r\n            }\r\n        };\r\n\r\n        return [new THREE.MeshBasicMaterial({ map: tex, side: THREE.DoubleSide, transparent: true }), canvas];\r\n    }, []);\r\n\r\n    return (\r\n        <group ref={parentRef}>\r\n            <mesh material={mat1} position={[0, 50, 0]}>\r\n                <planeGeometry attach=\"geometry\" args={[canvas1.width, canvas1.height]}></planeGeometry>\r\n            </mesh>\r\n\r\n            <mesh material={mat2} position={[0, 50, -50]}>\r\n                <planeGeometry attach=\"geometry\" args={[canvas2.width, canvas2.height]}></planeGeometry>\r\n            </mesh>\r\n        </group>\r\n    );\r\n}\r\n\r\nfunction Geometry() {\r\n    const floorTexture = useLoader(TextureLoader, floorTex);\r\n    floorTexture.wrapS = floorTexture.wrapT = RepeatWrapping;\r\n    floorTexture.repeat.set(10, 10);\r\n    return (\r\n        <group>\r\n            {/* Floor */}\r\n            <mesh position={[0, -0.5, 0]} rotation={[-Math.PI / 2, 0, 0]}>\r\n                <planeGeometry attach=\"geometry\" args={[1000, 1000, 1, 1]}></planeGeometry>\r\n                <meshBasicMaterial attach=\"material\" map={floorTexture} args={{ side: DoubleSide }}></meshBasicMaterial>\r\n            </mesh>\r\n\r\n            {/* Sky */}\r\n            <mesh>\r\n                <boxGeometry attach=\"geometry\" args={[10000, 10000, 10000]}></boxGeometry>\r\n                <meshBasicMaterial args={{ color: 0x9990ff, side: BackSide }}></meshBasicMaterial>\r\n            </mesh>\r\n\r\n            <axesHelper args={[100]}></axesHelper>\r\n        </group>\r\n    )\r\n}\r\n\r\nfunction Lights() {\r\n    return (\r\n        <group>\r\n            <pointLight position={[0, 250, 0]} args={[0xffffff]}></pointLight>\r\n            <ambientLight args={[0x111111]}></ambientLight>\r\n        </group>\r\n    );\r\n}\r\n\r\n\r\nfunction TextureFromCanvasPage(props) {\r\n\r\n    return (\r\n        <div className=\"wrapper\">\r\n            <Canvas>\r\n                <CameraWrapper />\r\n                <OrbitControls />\r\n                <Lights></Lights>\r\n                <Canvas2D></Canvas2D>\r\n                <Suspense fallback={null}>\r\n                    <Geometry></Geometry>\r\n                </Suspense>\r\n                <Stats />\r\n            </Canvas>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TextureFromCanvasPage;\r\n","D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\pages\\textures\\texture-animation.js",["234","235"],"import React, { Suspense, useMemo } from 'react';\r\nimport { Canvas, useFrame, useLoader, useThree, useUpdate } from 'react-three-fiber';\r\nimport * as THREE from 'three';\r\n\r\nimport MyCamera from '../../reusable/CustomCamera';\r\nimport Stats from '../../reusable/Stats';\r\nimport OrbitControls from '../../reusable/OrbitControls';\r\nimport TextureAnimator from '../../reusable/TextureAnimator';\r\n\r\nimport { DoubleSide, TextureLoader, RepeatWrapping, BackSide, FogExp2 } from \"three\";\r\n\r\nimport floorTex from '../../assets/textures/checkerboard.jpg';\r\nimport explosionTex from '../../assets/textures/explosion.jpg';\r\nimport runTex from '../../assets/textures/run.png';\r\n\r\nfunction CameraWrapper(props) {\r\n    const { scene } = useThree();\r\n\r\n    const OnCameraInit = (cam) => {\r\n        cam.position.set(0, 150, 400);\r\n        cam.lookAt(scene.position);\r\n\r\n        scene.fog = new FogExp2(0x9999ff, 0.00025);\r\n    };\r\n\r\n    return (\r\n        <MyCamera OnCameraInit={OnCameraInit} fov={45} near={0.01} far={20000}></MyCamera>\r\n    );\r\n}\r\n\r\nfunction Geometry() {\r\n    const floorTexture = useLoader(TextureLoader, floorTex);\r\n    floorTexture.wrapS = floorTexture.wrapT = RepeatWrapping;\r\n    floorTexture.repeat.set(10, 10);\r\n\r\n    const clock = useMemo(()=>{\r\n        return new THREE.Clock();\r\n    },[])\r\n    const runTexture = useLoader(TextureLoader, runTex);\r\n    const annie = useMemo(() => new TextureAnimator(runTexture, 10, 1, 10, 75), [runTexture]);\r\n\r\n    const explosionTexture = useLoader(TextureLoader, explosionTex);\r\n    const boomer = useMemo(()=> new TextureAnimator(explosionTexture, 4, 4, 16, 55));\r\n    useFrame(() => {\r\n        let delta = clock.getDelta();\r\n        annie.update(1000 * delta);\r\n        boomer.update(1000 * delta);\r\n    });\r\n    return (\r\n        <group>\r\n            <mesh position={[-100, 25, 0]}>\r\n                <planeGeometry attach=\"geometry\" args={[50, 50, 1, 1]}></planeGeometry>\r\n                <meshBasicMaterial map={runTexture} side={THREE.DoubleSide}></meshBasicMaterial>\r\n            </mesh>\r\n            <mesh position={[0, 26, 0]}>\r\n                <boxGeometry attach=\"geometry\" args={[50, 50, 50]}></boxGeometry>\r\n                <meshBasicMaterial map={explosionTexture} side={THREE.DoubleSide}></meshBasicMaterial>\r\n            </mesh>\r\n\r\n            {/* Floor */}\r\n            <mesh position={[0, -0.5, 0]} rotation={[-Math.PI / 2, 0, 0]}>\r\n                <planeGeometry attach=\"geometry\" args={[1000, 1000, 1, 1]}></planeGeometry>\r\n                <meshBasicMaterial attach=\"material\" map={floorTexture} args={{ side: DoubleSide }}></meshBasicMaterial>\r\n            </mesh>\r\n\r\n            {/* Sky */}\r\n            <mesh>\r\n                <boxGeometry attach=\"geometry\" args={[10000, 10000, 10000]}></boxGeometry>\r\n                <meshBasicMaterial args={{ color: 0x9990ff, side: BackSide }}></meshBasicMaterial>\r\n            </mesh>\r\n\r\n            <axesHelper args={[100]}></axesHelper>\r\n        </group>\r\n    )\r\n}\r\n\r\nfunction Lights() {\r\n    return (\r\n        <group>\r\n            <pointLight position={[0, 250, 0]} args={[0xffffff]}></pointLight>\r\n            <ambientLight args={[0x111111]}></ambientLight>\r\n        </group>\r\n    );\r\n}\r\n\r\n\r\nfunction TextureAnimationPage(props) {\r\n\r\n    return (\r\n        <div className=\"wrapper\">\r\n            <Canvas>\r\n                <CameraWrapper />\r\n                <OrbitControls />\r\n                <Lights></Lights>\r\n                <Suspense fallback={null}>\r\n                    <Geometry></Geometry>\r\n                </Suspense>\r\n                <Stats />\r\n            </Canvas>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TextureAnimationPage;\r\n","D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\reusable\\TextureAnimator.js",[],"D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\pages\\sprites-examples\\sprites.js",["236","237"],"import React, { Suspense } from 'react';\r\nimport { Canvas, useLoader, useThree } from 'react-three-fiber';\r\nimport * as THREE from 'three';\r\n\r\nimport MyCamera from '../../reusable/CustomCamera';\r\nimport Stats from '../../reusable/Stats';\r\nimport OrbitControls from '../../reusable/OrbitControls';\r\n\r\nimport { DoubleSide, TextureLoader, RepeatWrapping, BackSide, FogExp2 } from \"three\";\r\n\r\nimport floorTex from '../../assets/textures/checkerboard.jpg';\r\nimport redballTex from '../../assets/textures/redball.png';\r\nimport crateTex from '../../assets/textures/crate.png';\r\n\r\nfunction CameraWrapper(props) {\r\n    const { scene } = useThree();\r\n\r\n    const OnCameraInit = (cam) => {\r\n        cam.position.set(0, 150, 400);\r\n        cam.lookAt(scene.position);\r\n\r\n        scene.fog = new FogExp2(0x9999ff, 0.00025);\r\n    };\r\n\r\n    return (\r\n        <MyCamera OnCameraInit={OnCameraInit} fov={45} near={0.01} far={20000}></MyCamera>\r\n    );\r\n}\r\n\r\nfunction Geometry() {\r\n    const floorTexture = useLoader(TextureLoader, floorTex);\r\n    floorTexture.wrapS = floorTexture.wrapT = RepeatWrapping;\r\n    floorTexture.repeat.set(10, 10);\r\n\r\n    //DEPRECATED\r\n    //For Screen Space Sprites there is no support anymore\r\n    //Alternatives can be using HTML/CSS or having a new, ortographic scene that is rendered right after our main scene, with world-space sprites\r\n    const ballTexture = useLoader(TextureLoader, redballTex);\r\n\r\n    const crateTexture = useLoader(TextureLoader, crateTex);\r\n\r\n    return (\r\n        <group>\r\n            <sprite position={[-100, 50, 0]} scale={[64, 64, 1]}>\r\n                <spriteMaterial attach=\"material\" map={crateTexture} color={0xff0000}></spriteMaterial>\r\n            </sprite>\r\n            <sprite position={[-0, 50, 0]} scale={[64, 64, 1]}>\r\n                <spriteMaterial attach=\"material\" map={crateTexture} color={0x00ff00}></spriteMaterial>\r\n            </sprite>\r\n            <sprite position={[100, 50, 0]} scale={[64, 64, 1]}>\r\n                <spriteMaterial attach=\"material\" map={crateTexture} color={0x0000ff}></spriteMaterial>\r\n            </sprite>\r\n\r\n            {/* Floor */}\r\n            <mesh position={[0, -0.5, 0]} rotation={[-Math.PI / 2, 0, 0]}>\r\n                <planeGeometry attach=\"geometry\" args={[1000, 1000, 1, 1]}></planeGeometry>\r\n                <meshBasicMaterial attach=\"material\" map={floorTexture} args={{ side: DoubleSide }}></meshBasicMaterial>\r\n            </mesh>\r\n\r\n            {/* Sky */}\r\n            <mesh>\r\n                <boxGeometry attach=\"geometry\" args={[10000, 10000, 10000]}></boxGeometry>\r\n                <meshBasicMaterial args={{ color: 0x9990ff, side: BackSide }}></meshBasicMaterial>\r\n            </mesh>\r\n\r\n            <axesHelper args={[100]}></axesHelper>\r\n        </group>\r\n    )\r\n}\r\n\r\nfunction Lights() {\r\n    return (\r\n        <group>\r\n            <pointLight position={[0, 250, 0]} args={[0xffffff]}></pointLight>\r\n            <ambientLight args={[0x111111]}></ambientLight>\r\n        </group>\r\n    );\r\n}\r\n\r\n\r\nfunction SpritesPage(props) {\r\n\r\n    return (\r\n        <div className=\"wrapper\">\r\n            <Canvas>\r\n                <CameraWrapper />\r\n                <OrbitControls />\r\n                <Lights></Lights>\r\n                <Suspense fallback={null}>\r\n                    <Geometry></Geometry>\r\n                </Suspense>\r\n                <Stats />\r\n            </Canvas>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SpritesPage;\r\n","D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\pages\\sprites-examples\\sprite-text-labels.js",["238"],"import React, { Suspense } from 'react';\r\nimport { Canvas, useLoader, useThree } from 'react-three-fiber';\r\nimport * as THREE from 'three';\r\n\r\nimport MyCamera from '../../reusable/CustomCamera';\r\nimport Stats from '../../reusable/Stats';\r\nimport OrbitControls from '../../reusable/OrbitControls';\r\nimport TextSprite from '../../reusable/TextSprite';\r\n\r\nimport { DoubleSide, TextureLoader, RepeatWrapping, BackSide, FogExp2 } from \"three\";\r\n\r\nimport floorTex from '../../assets/textures/checkerboard.jpg';\r\n\r\nfunction CameraWrapper(props) {\r\n    const { scene } = useThree();\r\n\r\n    const OnCameraInit = (cam) => {\r\n        cam.position.set(0, 150, 400);\r\n        cam.lookAt(scene.position);\r\n\r\n        scene.fog = new FogExp2(0x9999ff, 0.00025);\r\n    };\r\n\r\n    return (\r\n        <MyCamera OnCameraInit={OnCameraInit} fov={45} near={0.01} far={20000}></MyCamera>\r\n    );\r\n}\r\n\r\nfunction Geometry() {\r\n    const floorTexture = useLoader(TextureLoader, floorTex);\r\n    floorTexture.wrapS = floorTexture.wrapT = RepeatWrapping;\r\n    floorTexture.repeat.set(10, 10);\r\n\r\n    var style1 = {\r\n        fontsize: 24, borderColor: {r:255, g:0, b:0, a:1.0}, backgroundColor:{r:255, g:100,b:100, a:0.8}\r\n    };\r\n\r\n    var style2={\r\n        fontsize: 32, fontface: \"Georgia\", borderColor: {r:0, g:0, b:255, a:1.0}\r\n    };\r\n    return (\r\n        <group>\r\n            <mesh position={[0, 50.1, 0]} name=\"Cube\">\r\n                <boxGeometry attach=\"geometry\" args={[100, 100, 100]}></boxGeometry>\r\n                <meshNormalMaterial attach=\"material\"></meshNormalMaterial>\r\n            </mesh>\r\n\r\n            <TextSprite message=\"Hello, \" parameters={style1} position={[-85, 105, 55]}></TextSprite>\r\n            <TextSprite message=\" World!\" parameters={style2} position={[55, 105, 55]}></TextSprite>\r\n            {/* Floor */}\r\n            <mesh position={[0, -0.5, 0]} rotation={[-Math.PI / 2, 0, 0]}>\r\n                <planeGeometry attach=\"geometry\" args={[1000, 1000, 1, 1]}></planeGeometry>\r\n                <meshBasicMaterial attach=\"material\" map={floorTexture} args={{ side: DoubleSide }}></meshBasicMaterial>\r\n            </mesh>\r\n\r\n            {/* Sky */}\r\n            <mesh>\r\n                <boxGeometry attach=\"geometry\" args={[10000, 10000, 10000]}></boxGeometry>\r\n                <meshBasicMaterial args={{ color: 0x9990ff, side: BackSide }}></meshBasicMaterial>\r\n            </mesh>\r\n\r\n            <axesHelper args={[100]}></axesHelper>\r\n        </group>\r\n    )\r\n}\r\n\r\nfunction Lights() {\r\n    return (\r\n        <group>\r\n            <pointLight position={[0, 250, 0]} args={[0xffffff]}></pointLight>\r\n            <ambientLight args={[0x111111]}></ambientLight>\r\n        </group>\r\n    );\r\n}\r\n\r\n\r\nfunction SpriteTextLabels(props) {\r\n\r\n    return (\r\n        <div className=\"wrapper\">\r\n            <Canvas>\r\n                <CameraWrapper />\r\n                <OrbitControls />\r\n                <Lights></Lights>\r\n                <Suspense fallback={null}>\r\n                    <Geometry></Geometry>\r\n                </Suspense>\r\n                <Stats />\r\n            </Canvas>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SpriteTextLabels;\r\n","D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\pages\\sprites-examples\\labeled-geometry.js",["239","240","241","242","243"],"import React, { Suspense, useMemo } from 'react';\r\nimport { Canvas, useLoader, useThree } from 'react-three-fiber';\r\nimport * as THREE from 'three';\r\nimport { BufferGeometryUtils } from 'three/examples/jsm/utils/BufferGeometryUtils';\r\n\r\nimport MyCamera from '../../reusable/CustomCamera';\r\nimport Stats from '../../reusable/Stats';\r\nimport OrbitControls from '../../reusable/OrbitControls';\r\nimport { TextSpriteObject } from '../../reusable/TextSprite';\r\n\r\nimport { DoubleSide, TextureLoader, RepeatWrapping, BackSide, FogExp2 } from \"three\";\r\n\r\nfunction CameraWrapper(props) {\r\n    const { scene } = useThree();\r\n\r\n    const OnCameraInit = (cam) => {\r\n        cam.position.set(0, 150, 400);\r\n        cam.lookAt(scene.position);\r\n\r\n        scene.fog = new FogExp2(0x9999ff, 0.00025);\r\n    };\r\n\r\n    return (\r\n        <MyCamera OnCameraInit={OnCameraInit} fov={45} near={0.01} far={20000}></MyCamera>\r\n    );\r\n}\r\n\r\nfunction Geometry() {\r\n    const { scene } = useThree();\r\n\r\n    let _mGeometry = useMemo(() => {\r\n        //Indexed has in positions attribute faces in the index attribute\r\n        //Without merging vertices, a vertex can repeat once for each face it's part ok\r\n        //The threshold(10) was a bit empirically chosen :-?\r\n        let geometry = BufferGeometryUtils.mergeVertices(new THREE.SphereBufferGeometry(100, 4, 3), 10).toNonIndexed();\r\n        \r\n        //As many mesh accessing methods, DEPRECATED\r\n        // geometry.mergeVertices();\r\n        // geometry.computeCentroids();\r\n\r\n        //Vertex labels\r\n        let vertices = geometry.attributes.position.array;\r\n        console.log(\"vertices\",  geometry.attributes);\r\n        \r\n        //TOOD: Merge vertices\r\n        for (let i = 0; i < vertices.length; i+=3) {\r\n            var spritey = TextSpriteObject({\r\n                \"message\": \" \" + (i/3) + \" \", \"parameters\": {\r\n                    fontsize: 32, backgroundColor: { r: 255, g: 100, b: 100, a: 1 }\r\n                }\r\n            });\r\n            let pos = new THREE.Vector3(vertices[i], vertices[i+1],vertices[i+2]).multiplyScalar(1.1);\r\n            spritey.position.set(pos.x, pos.y, pos.z);\r\n            scene.add(spritey);\r\n        }\r\n\r\n        for (let i = 0; i < vertices.length; i+=9) {\r\n            var spritey = TextSpriteObject({\r\n                \"message\": \" \" + (i/3) + \" \", \"parameters\": {\r\n                    fontsize: 32, backgroundColor: { r: 100, g: 100, b: 255, a: 1 }\r\n                }\r\n            });\r\n            let pos1 = new THREE.Vector3(vertices[i], vertices[i+1],vertices[i+2]);\r\n            let pos2 = new THREE.Vector3(vertices[i+3], vertices[i+4],vertices[i+5]);\r\n            let pos3 = new THREE.Vector3(vertices[i+6], vertices[i+7],vertices[i+8]);\r\n            let centroid = pos1.add(pos2).add(pos3).divideScalar(3).multiplyScalar(1.1);\r\n            spritey.position.set(centroid.x, centroid.y, centroid.z);\r\n            scene.add(spritey);\r\n        }\r\n\r\n        return geometry;\r\n    }, [scene]);\r\n\r\n    return (\r\n        <group>\r\n            <mesh position={[0, 0, 0]} geometry={_mGeometry}>\r\n                <meshNormalMaterial></meshNormalMaterial>\r\n            </mesh>\r\n\r\n            {/* Sky */}\r\n            <mesh>\r\n                <boxGeometry attach=\"geometry\" args={[10000, 10000, 10000]}></boxGeometry>\r\n                <meshBasicMaterial color={0x9990ff} side={BackSide}></meshBasicMaterial>\r\n            </mesh>\r\n\r\n            <axesHelper args={[100]}></axesHelper>\r\n        </group>\r\n    )\r\n}\r\n\r\nfunction Lights() {\r\n    return (\r\n        <group>\r\n            <pointLight position={[0, 250, 0]} args={[0xffffff]}></pointLight>\r\n            <ambientLight args={[0x111111]}></ambientLight>\r\n        </group>\r\n    );\r\n}\r\n\r\n\r\nfunction LabeledGeometryPage(props) {\r\n\r\n    return (\r\n        <div className=\"wrapper\">\r\n            <Canvas>\r\n                <CameraWrapper />\r\n                <OrbitControls />\r\n                <Lights></Lights>\r\n                <Suspense fallback={null}>\r\n                    <Geometry></Geometry>\r\n                </Suspense>\r\n                <Stats />\r\n            </Canvas>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LabeledGeometryPage;\r\n","D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\reusable\\TextSprite.js",[],"D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\pages\\mouse-and-keyboard-examples\\mouse-sprite.js",["244","245"],"import React, { Suspense, useEffect, useMemo, useState } from 'react';\r\nimport { Canvas, useLoader, useThree } from 'react-three-fiber';\r\nimport * as THREE from 'three';\r\n\r\nimport MyCamera from '../../reusable/CustomCamera';\r\nimport Stats from '../../reusable/Stats';\r\nimport OrbitControls from '../../reusable/OrbitControls';\r\n\r\nimport { DoubleSide, TextureLoader, RepeatWrapping, BackSide, FogExp2 } from \"three\";\r\n\r\nimport floorTex from '../../assets/textures/checkerboard.jpg';\r\nimport redballTex from '../../assets/textures/redball.png';\r\n\r\n\r\n//Not working\r\n//It is possible to implement but most features used here are deprecated\r\n//Preferable to use HTML/CSS elements\r\nfunction CameraWrapper(props) {\r\n    const { scene } = useThree();\r\n\r\n    const OnCameraInit = (cam) => {\r\n        cam.position.set(0, 150, 400);\r\n        cam.lookAt(scene.position);\r\n\r\n        scene.fog = new FogExp2(0x9999ff, 0.00025);\r\n    };\r\n\r\n    return (\r\n        <MyCamera OnCameraInit={OnCameraInit} fov={45} near={0.01} far={20000}></MyCamera>\r\n    );\r\n}\r\n\r\n\r\nfunction Geometry(props) {\r\n\r\n    const floorTexture = useLoader(TextureLoader, floorTex);\r\n    floorTexture.wrapS = floorTexture.wrapT = RepeatWrapping;\r\n    floorTexture.repeat.set(10, 10);\r\n\r\n    const redballTexture = useLoader(TextureLoader, redballTex);\r\n\r\n    const { camera } = useThree();\r\n    //https://stackoverflow.com/questions/36033879/three-js-object-follows-mouse-position\r\n    let pos = useMemo(() => {\r\n        let v = new THREE.Vector3(props.ballPos.x, props.ballPos.y, 0.5);\r\n        v.unproject(camera);\r\n        let dir = v.sub(camera.position).normalize();\r\n        // let distance = - camera.position.z / dir.z;\r\n        // let pos = camera.position.clone().add(dir.multiplyScalar(distance));\r\n        dir = dir.multiplyScalar(150);\r\n        let pos = camera.position.clone().add(dir);\r\n        console.log(\"pos\", dir);\r\n        return dir;\r\n    }, [props.ballPos, camera])\r\n    return (\r\n        <group>\r\n            {pos &&\r\n                <sprite position={[pos.x, pos.y, pos.z]} scale={[32, 32, 1]}>\r\n                    <spriteMaterial attach=\"material\" map={redballTexture}></spriteMaterial>\r\n                </sprite>\r\n            }\r\n\r\n            <mesh position={[0, 26, 0]}>\r\n                <boxGeometry attach=\"geometry\" args={[50, 50, 50]}></boxGeometry>\r\n                <meshBasicMaterial attach=\"material\" color={0x000088}></meshBasicMaterial>\r\n            </mesh>\r\n\r\n\r\n            {/* Floor */}\r\n            <mesh position={[0, -0.5, 0]} rotation={[-Math.PI / 2, 0, 0]}>\r\n                <planeGeometry attach=\"geometry\" args={[1000, 1000, 1, 1]}></planeGeometry>\r\n                <meshBasicMaterial attach=\"material\" map={floorTexture} side={DoubleSide}></meshBasicMaterial>\r\n            </mesh>\r\n\r\n            {/* Sky */}\r\n            <mesh>\r\n                <boxGeometry attach=\"geometry\" args={[10000, 10000, 10000]}></boxGeometry>\r\n                <meshBasicMaterial attach=\"material\" color={0x9990ff} side={BackSide}></meshBasicMaterial>\r\n            </mesh>\r\n\r\n            <axesHelper args={[100]}></axesHelper>\r\n        </group>\r\n    )\r\n}\r\n\r\nfunction Lights() {\r\n    return (\r\n        <group>\r\n            <pointLight position={[0, 250, 0]} args={[0xffffff]}></pointLight>\r\n            <ambientLight args={[0x111111]}></ambientLight>\r\n        </group>\r\n    );\r\n}\r\n\r\nfunction MouseSpritePage(props) {\r\n    let [ballSpritePos, setBallSpritePos] = useState({ x: 0, y: 0, z: 0 });\r\n\r\n    let handleMouseMove = (ev, setter) => {\r\n        setter({ x: ev.clientX, y: ev.clientY, z: 0 });\r\n    }\r\n    return (\r\n        <div className=\"wrapper\" onMouseMove={(ev) => handleMouseMove(ev, setBallSpritePos)}>\r\n            <Canvas>\r\n                <CameraWrapper />\r\n                <OrbitControls />\r\n                <Lights></Lights>\r\n                <Suspense fallback={null}>\r\n                    <Geometry ballPos={ballSpritePos}></Geometry>\r\n                </Suspense>\r\n                <Stats />\r\n            </Canvas>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MouseSpritePage;\r\n","D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\pages\\mouse-and-keyboard-examples\\mouse-click.js",["246","247","248"],"import React, { Suspense, useMemo, useRef } from 'react';\r\nimport { Canvas, useFrame, useLoader, useResource, useThree } from 'react-three-fiber';\r\nimport * as THREE from 'three';\r\n\r\nimport MyCamera from '../../reusable/CustomCamera';\r\nimport Stats from '../../reusable/Stats';\r\nimport OrbitControls from '../../reusable/OrbitControls';\r\n\r\nimport { DoubleSide, TextureLoader, RepeatWrapping, BackSide, FogExp2 } from \"three\";\r\n\r\nimport floorTex from '../../assets/textures/checkerboard.jpg';\r\n\r\nfunction CameraWrapper(props) {\r\n  const { scene } = useThree();\r\n\r\n  const OnCameraInit = (cam) => {\r\n    cam.position.set(0, 150, 400);\r\n    cam.lookAt(scene.position);\r\n\r\n    scene.fog = new FogExp2(0x9999ff, 0.00025);\r\n  };\r\n\r\n  return (\r\n    <MyCamera OnCameraInit={OnCameraInit} fov={45} near={0.01} far={20000}></MyCamera>\r\n  );\r\n}\r\n\r\nfunction Geometry() {\r\n  const mySphere = useRef();\r\n  const { camera } = useThree();\r\n\r\n  const floorTexture = useLoader(TextureLoader, floorTex);\r\n  floorTexture.wrapS = floorTexture.wrapT = RepeatWrapping;\r\n  floorTexture.repeat.set(10, 10);\r\n\r\n  //Check also vertex-colors\r\n  let sphereGeometry = useMemo(() => {\r\n    let sphereGeometry = new THREE.SphereBufferGeometry(80, 32, 16).toNonIndexed();\r\n    //Each vertex is X,Y,Z in array\r\n    const nrOfNonIndexedVertices = sphereGeometry.getAttribute(\"position\").array.length / 3;\r\n\r\n    //For each three vertices -> a triangle\r\n    let colors = [];\r\n    for (let i = 0; i < nrOfNonIndexedVertices; i += 3) {\r\n      let r = 0;\r\n      let g = 0;\r\n      let b = 0.8 * Math.random() + 0.2;\r\n      for (let j = 0; j < 3; j++) {\r\n        colors.push(r);\r\n        colors.push(g);\r\n        colors.push(b);\r\n      }\r\n    }\r\n\r\n    console.log(\"Colors length\", colors.length);\r\n    sphereGeometry.setAttribute(\"color\", new THREE.Float32BufferAttribute(colors, 3, true));\r\n    sphereGeometry.attributes.color.needsUpdate = true;\r\n    return sphereGeometry;\r\n  });\r\n\r\n  let [raycaster, mouse] = useMemo(() => {\r\n    return [new THREE.Raycaster(), new THREE.Vector2()]\r\n  });\r\n\r\n  document.addEventListener(\"click\", (event) => {\r\n    mouse = {};\r\n    mouse.x = (event.clientX / window.innerWidth) * 2 - 1;\r\n    mouse.y = - (event.clientY / window.innerHeight) * 2 + 1;\r\n  }, false);\r\n\r\n  useFrame(({ gl, scene }) => {\r\n    if (mouse !== undefined) {\r\n      raycaster.setFromCamera(mouse, camera);\r\n      const intersects = raycaster.intersectObject(mySphere.current);\r\n      for (let i = 0; i < intersects.length; i++) {\r\n        console.log(\"Intersects\", intersects[i]);\r\n        console.log(\"Intersects\", sphereGeometry.attributes);\r\n        mouse = undefined;\r\n\r\n        const colorArray = sphereGeometry.getAttribute(\"color\").array;\r\n        //Each color is 3 floats from 0 to 1\r\n        //Red in RGB: 1 0 0\r\n        //We can also use faceIndex\r\n        //v1\r\n        colorArray[3*intersects[i].face.a] = 1;\r\n        colorArray[3*intersects[i].face.a+1] = 0;\r\n        colorArray[3*intersects[i].face.a+2] = 0;\r\n        //v2\r\n        colorArray[3*intersects[i].face.b] = 1;\r\n        colorArray[3*intersects[i].face.b+1] = 0;\r\n        colorArray[3*intersects[i].face.b+2] = 0;\r\n        //v2\r\n        colorArray[3*intersects[i].face.c] = 1;\r\n        colorArray[3*intersects[i].face.c+1] = 0;\r\n        colorArray[3*intersects[i].face.c+2] = 0;\r\n        sphereGeometry.setAttribute(\"color\", new THREE.Float32BufferAttribute(colorArray, 3, true));\r\n      }\r\n    }\r\n  });\r\n\r\n  return (\r\n    <group>\r\n      <mesh ref={mySphere} position={[100, 50, -50]} geometry={sphereGeometry}>\r\n        <meshBasicMaterial attach=\"material\" vertexColors={THREE.VertexColors}></meshBasicMaterial>\r\n      </mesh>\r\n\r\n      {/* Floor */}\r\n      <mesh position={[0, -0.5, 0]} rotation={[-Math.PI / 2, 0, 0]}>\r\n        <planeGeometry attach=\"geometry\" args={[1000, 1000, 1, 1]}></planeGeometry>\r\n        <meshBasicMaterial attach=\"material\" map={floorTexture} side={DoubleSide}></meshBasicMaterial>\r\n      </mesh>\r\n\r\n      {/* Sky */}\r\n      <mesh>\r\n        <boxGeometry attach=\"geometry\" args={[10000, 10000, 10000]}></boxGeometry>\r\n        <meshBasicMaterial color={0x9990ff} side={BackSide}></meshBasicMaterial>\r\n      </mesh>\r\n\r\n      <axesHelper args={[100]}></axesHelper>\r\n    </group>\r\n  )\r\n}\r\n\r\nfunction Lights() {\r\n  return (\r\n    <group>\r\n      <pointLight position={[0, 250, 0]} args={[0xffffff]}></pointLight>\r\n      <ambientLight args={[0x111111]}></ambientLight>\r\n    </group>\r\n  );\r\n}\r\n\r\nfunction OnDocumentMouseDown() {\r\n  console.log(\"Click!\");\r\n}\r\n\r\nfunction MouseClickPage(props) {\r\n  return (\r\n    <div className=\"wrapper\" onClick={() => OnDocumentMouseDown()}>\r\n      <Canvas >\r\n        <CameraWrapper />\r\n        <OrbitControls />\r\n        <Lights></Lights>\r\n        <Suspense fallback={null}>\r\n          <Geometry></Geometry>\r\n        </Suspense>\r\n        <Stats />\r\n      </Canvas>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MouseClickPage;\r\n","D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\pages\\mouse-and-keyboard-examples\\mouse-hover.js",["249"],"import React, { Suspense, useMemo, useRef } from 'react';\r\nimport { Canvas, useLoader, useThree, useFrame } from 'react-three-fiber';\r\nimport * as THREE from 'three';\r\n\r\nimport MyCamera from '../../reusable/CustomCamera';\r\nimport Stats from '../../reusable/Stats';\r\nimport OrbitControls from '../../reusable/OrbitControls';\r\n\r\nimport { DoubleSide, TextureLoader, RepeatWrapping, BackSide, FogExp2 } from \"three\";\r\n\r\nimport floorTex from '../../assets/textures/checkerboard.jpg';\r\n\r\nfunction CameraWrapper(props) {\r\n  const { scene } = useThree();\r\n\r\n  const OnCameraInit = (cam) => {\r\n    cam.position.set(0, 150, 400);\r\n    cam.lookAt(scene.position);\r\n\r\n    scene.fog = new FogExp2(0x9999ff, 0.00025);\r\n  };\r\n\r\n  return (\r\n    <MyCamera OnCameraInit={OnCameraInit} fov={45} near={0.01} far={20000}></MyCamera>\r\n  );\r\n}\r\n\r\nfunction Geometry() {\r\n  const { camera } = useThree();\r\n  const parentGroup = useRef();\r\n\r\n  const floorTexture = useLoader(TextureLoader, floorTex);\r\n  floorTexture.wrapS = floorTexture.wrapT = RepeatWrapping;\r\n  floorTexture.repeat.set(10, 10);\r\n\r\n  let [raycaster, mouse] = useMemo(() => {\r\n    return [new THREE.Raycaster(), new THREE.Vector2()]\r\n  });\r\n\r\n  document.addEventListener(\"mousemove\", (event) => {\r\n    mouse = {};\r\n    mouse.x = (event.clientX / window.innerWidth) * 2 - 1;\r\n    mouse.y = - (event.clientY / window.innerHeight) * 2 + 1;\r\n  }, false);\r\n\r\n  let INTERSECTED = null;\r\n  useFrame(({ gl, scene }) => {\r\n    if (mouse !== undefined && parentGroup.current !== null) {\r\n      raycaster.setFromCamera(mouse, camera);\r\n      const intersects = raycaster.intersectObjects(parentGroup.current.children);\r\n      if (intersects.length > 0) {\r\n        if (intersects[0].object !== INTERSECTED) {\r\n          if (INTERSECTED) {\r\n            INTERSECTED.material.color.setHex(INTERSECTED.currentHex);\r\n          }\r\n          INTERSECTED = intersects[0].object;\r\n          INTERSECTED.currentHex = INTERSECTED.material.color.getHex();\r\n          INTERSECTED.material.color.setHex(0xffff00);\r\n        }\r\n      } else {\r\n        if(INTERSECTED){\r\n          INTERSECTED.material.color.setHex(INTERSECTED.currentHex);\r\n        }\r\n        INTERSECTED = null;\r\n      }\r\n    }\r\n  });\r\n\r\n  return (\r\n    <group ref={parentGroup}>\r\n      <mesh position={[0, 26, 0]}>\r\n        <boxGeometry attach=\"geometry\" args={[50, 50, 50]} />\r\n        <meshBasicMaterial attach=\"material\" args={{ color: 0x000088 }}></meshBasicMaterial>\r\n      </mesh>\r\n\r\n      {/* Floor */}\r\n      <mesh position={[0, -0.5, 0]} rotation={[-Math.PI / 2, 0, 0]}>\r\n        <planeGeometry attach=\"geometry\" args={[1000, 1000, 1, 1]}></planeGeometry>\r\n        <meshBasicMaterial attach=\"material\" map={floorTexture} side={DoubleSide}></meshBasicMaterial>\r\n      </mesh>\r\n\r\n      {/* Sky */}\r\n      <mesh>\r\n        <boxGeometry attach=\"geometry\" args={[10000, 10000, 10000]}></boxGeometry>\r\n        <meshBasicMaterial color={0x9990ff} side={BackSide}></meshBasicMaterial>\r\n      </mesh>\r\n\r\n      <axesHelper args={[100]}></axesHelper>\r\n    </group>\r\n  )\r\n}\r\n\r\nfunction Lights() {\r\n  return (\r\n    <group>\r\n      <pointLight position={[0, 250, 0]} args={[0xffffff]}></pointLight>\r\n      <ambientLight args={[0x111111]}></ambientLight>\r\n    </group>\r\n  );\r\n}\r\n\r\n\r\nfunction MouseHoverPage(props) {\r\n\r\n  return (\r\n    <div className=\"wrapper\">\r\n      <Canvas>\r\n        <CameraWrapper />\r\n        <OrbitControls />\r\n        <Lights></Lights>\r\n        <Suspense fallback={null}>\r\n          <Geometry></Geometry>\r\n        </Suspense>\r\n        <Stats />\r\n      </Canvas>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MouseHoverPage;\r\n","D:\\Learning\\Three.js\\React-three-fiber\\ludo-game\\src\\pages\\mouse-and-keyboard-examples\\mouse-tooltip.js",["250","251","252","253","254"],{"ruleId":"255","replacedBy":"256"},{"ruleId":"257","replacedBy":"258"},{"ruleId":"259","severity":1,"message":"260","line":15,"column":7,"nodeType":"261","endLine":15,"endColumn":42,"suggestions":"262"},{"ruleId":"263","severity":1,"message":"264","line":12,"column":15,"nodeType":"265","messageId":"266","endLine":12,"endColumn":21},{"ruleId":"267","severity":1,"message":"268","line":96,"column":4,"nodeType":"269","messageId":"270","endLine":96,"endColumn":8,"fix":"271"},{"ruleId":"263","severity":1,"message":"264","line":18,"column":14,"nodeType":"265","messageId":"266","endLine":18,"endColumn":20},{"ruleId":"272","severity":1,"message":"273","line":3,"column":13,"nodeType":"265","messageId":"274","endLine":3,"endColumn":18},{"ruleId":"272","severity":1,"message":"275","line":1,"column":27,"nodeType":"265","messageId":"274","endLine":1,"endColumn":36},{"ruleId":"272","severity":1,"message":"276","line":1,"column":47,"nodeType":"265","messageId":"274","endLine":1,"endColumn":53},{"ruleId":"272","severity":1,"message":"277","line":27,"column":18,"nodeType":"265","messageId":"274","endLine":27,"endColumn":26},{"ruleId":"259","severity":1,"message":"278","line":27,"column":41,"nodeType":"265","endLine":27,"endColumn":48},{"ruleId":"272","severity":1,"message":"275","line":1,"column":27,"nodeType":"265","messageId":"274","endLine":1,"endColumn":36},{"ruleId":"272","severity":1,"message":"279","line":1,"column":38,"nodeType":"265","messageId":"274","endLine":1,"endColumn":45},{"ruleId":"272","severity":1,"message":"276","line":1,"column":47,"nodeType":"265","messageId":"274","endLine":1,"endColumn":53},{"ruleId":"259","severity":1,"message":"278","line":35,"column":70,"nodeType":"265","endLine":35,"endColumn":77},{"ruleId":"272","severity":1,"message":"280","line":4,"column":10,"nodeType":"265","messageId":"274","endLine":4,"endColumn":20},{"ruleId":"259","severity":1,"message":"281","line":67,"column":6,"nodeType":"261","endLine":67,"endColumn":49,"suggestions":"282"},{"ruleId":"259","severity":1,"message":"283","line":94,"column":8,"nodeType":"261","endLine":94,"endColumn":32,"suggestions":"284"},{"ruleId":"259","severity":1,"message":"283","line":132,"column":8,"nodeType":"261","endLine":132,"endColumn":15,"suggestions":"285"},{"ruleId":"272","severity":1,"message":"286","line":1,"column":55,"nodeType":"265","messageId":"274","endLine":1,"endColumn":63},{"ruleId":"259","severity":1,"message":"287","line":35,"column":11,"nodeType":"288","endLine":35,"endColumn":40},{"ruleId":"259","severity":1,"message":"289","line":52,"column":21,"nodeType":"290","endLine":52,"endColumn":92},{"ruleId":"259","severity":1,"message":"278","line":55,"column":19,"nodeType":"265","endLine":55,"endColumn":26},{"ruleId":"272","severity":1,"message":"275","line":1,"column":27,"nodeType":"265","messageId":"274","endLine":1,"endColumn":36},{"ruleId":"272","severity":1,"message":"280","line":7,"column":10,"nodeType":"265","messageId":"274","endLine":7,"endColumn":20},{"ruleId":"272","severity":1,"message":"286","line":1,"column":55,"nodeType":"265","messageId":"274","endLine":1,"endColumn":63},{"ruleId":"259","severity":1,"message":"291","line":45,"column":11,"nodeType":"288","endLine":45,"endColumn":40},{"ruleId":"259","severity":1,"message":"289","line":62,"column":21,"nodeType":"290","endLine":62,"endColumn":92},{"ruleId":"259","severity":1,"message":"278","line":65,"column":19,"nodeType":"265","endLine":65,"endColumn":26},{"ruleId":"272","severity":1,"message":"275","line":1,"column":27,"nodeType":"265","messageId":"274","endLine":1,"endColumn":36},{"ruleId":"272","severity":1,"message":"292","line":9,"column":72,"nodeType":"265","messageId":"274","endLine":9,"endColumn":79},{"ruleId":"259","severity":1,"message":"293","line":40,"column":9,"nodeType":"288","endLine":40,"endColumn":22},{"ruleId":"272","severity":1,"message":"292","line":9,"column":72,"nodeType":"265","messageId":"274","endLine":9,"endColumn":79},{"ruleId":"259","severity":1,"message":"294","line":42,"column":9,"nodeType":"288","endLine":42,"endColumn":22},{"ruleId":"272","severity":1,"message":"295","line":2,"column":18,"nodeType":"265","messageId":"274","endLine":2,"endColumn":24},{"ruleId":"272","severity":1,"message":"296","line":11,"column":10,"nodeType":"265","messageId":"274","endLine":11,"endColumn":20},{"ruleId":"272","severity":1,"message":"297","line":11,"column":53,"nodeType":"265","messageId":"274","endLine":11,"endColumn":61},{"ruleId":"272","severity":1,"message":"292","line":11,"column":72,"nodeType":"265","messageId":"274","endLine":11,"endColumn":79},{"ruleId":"259","severity":1,"message":"298","line":68,"column":9,"nodeType":"288","endLine":68,"endColumn":22},{"ruleId":"272","severity":1,"message":"292","line":10,"column":72,"nodeType":"265","messageId":"274","endLine":10,"endColumn":79},{"ruleId":"259","severity":1,"message":"299","line":48,"column":9,"nodeType":"288","endLine":48,"endColumn":22},{"ruleId":"272","severity":1,"message":"275","line":1,"column":27,"nodeType":"265","messageId":"274","endLine":1,"endColumn":36},{"ruleId":"259","severity":1,"message":"278","line":33,"column":27,"nodeType":"265","endLine":33,"endColumn":34},{"ruleId":"272","severity":1,"message":"300","line":2,"column":49,"nodeType":"265","messageId":"274","endLine":2,"endColumn":58},{"ruleId":"259","severity":1,"message":"278","line":43,"column":20,"nodeType":"265","endLine":43,"endColumn":27},{"ruleId":"272","severity":1,"message":"273","line":3,"column":13,"nodeType":"265","messageId":"274","endLine":3,"endColumn":18},{"ruleId":"272","severity":1,"message":"301","line":38,"column":11,"nodeType":"265","messageId":"274","endLine":38,"endColumn":22},{"ruleId":"272","severity":1,"message":"273","line":3,"column":13,"nodeType":"265","messageId":"274","endLine":3,"endColumn":18},{"ruleId":"272","severity":1,"message":"302","line":2,"column":18,"nodeType":"265","messageId":"274","endLine":2,"endColumn":27},{"ruleId":"272","severity":1,"message":"296","line":11,"column":10,"nodeType":"265","messageId":"274","endLine":11,"endColumn":20},{"ruleId":"272","severity":1,"message":"303","line":11,"column":22,"nodeType":"265","messageId":"274","endLine":11,"endColumn":35},{"ruleId":"272","severity":1,"message":"304","line":11,"column":37,"nodeType":"265","messageId":"274","endLine":11,"endColumn":51},{"ruleId":"305","severity":1,"message":"306","line":58,"column":17,"nodeType":"265","messageId":"307","endLine":58,"endColumn":24},{"ruleId":"272","severity":1,"message":"275","line":1,"column":27,"nodeType":"265","messageId":"274","endLine":1,"endColumn":36},{"ruleId":"272","severity":1,"message":"308","line":51,"column":13,"nodeType":"265","messageId":"274","endLine":51,"endColumn":16},{"ruleId":"272","severity":1,"message":"309","line":2,"column":39,"nodeType":"265","messageId":"274","endLine":2,"endColumn":50},{"ruleId":"259","severity":1,"message":"278","line":37,"column":24,"nodeType":"265","endLine":37,"endColumn":31},{"ruleId":"259","severity":1,"message":"278","line":61,"column":28,"nodeType":"265","endLine":61,"endColumn":35},{"ruleId":"259","severity":1,"message":"278","line":36,"column":28,"nodeType":"265","endLine":36,"endColumn":35},{"ruleId":"272","severity":1,"message":"310","line":9,"column":72,"nodeType":"265","messageId":"274","endLine":9,"endColumn":86},{"ruleId":"272","severity":1,"message":"311","line":9,"column":88,"nodeType":"265","messageId":"274","endLine":9,"endColumn":95},{"ruleId":"272","severity":1,"message":"312","line":9,"column":97,"nodeType":"265","messageId":"274","endLine":9,"endColumn":106},{"ruleId":"259","severity":1,"message":"278","line":33,"column":23,"nodeType":"265","endLine":33,"endColumn":30},{"ruleId":"259","severity":1,"message":"313","line":101,"column":8,"nodeType":"261","endLine":101,"endColumn":21,"suggestions":"314"},"no-native-reassign",["315"],"no-negated-in-lhs",["316"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'OnCameraInit'. Either include it or remove the dependency array. If 'OnCameraInit' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["317"],"no-use-before-define","'THREEx' was used before it was defined.","Identifier","usedBeforeDefined","no-extra-bind","The function binding is unnecessary.","CallExpression","unexpected",{"range":"318","text":"319"},"no-unused-vars","'THREE' is defined but never used.","unusedVar","'useEffect' is defined but never used.","'useRef' is defined but never used.","'terminus' is assigned a value but never used.","React Hook useMemo does nothing when called with only one argument. Did you forget to pass an array of dependencies?","'useMemo' is defined but never used.","'SceneUtils' is defined but never used.","React Hook useEffect has a missing dependency: 'multiMaterial'. Either include it or remove the dependency array.",["320"],"React Hook useMemo has an unnecessary dependency: 'scene'. Either exclude it or remove the dependency array.",["321"],["322"],"'useState' is defined but never used.","The 'font' object construction makes the dependencies of useMemo Hook (at line 42) change on every render. Move it inside the useMemo callback. Alternatively, wrap the initialization of 'font' in its own useMemo() Hook.","VariableDeclarator","Assignments to the 'textWidth' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","BinaryExpression","The 'font' object construction makes the dependencies of useMemo Hook (at line 52) change on every render. Move it inside the useMemo callback. Alternatively, wrap the initialization of 'font' in its own useMemo() Hook.","'Texture' is defined but never used.","The 'textures' array makes the dependencies of useMemo Hook (at line 59) change on every render. To fix this, wrap the initialization of 'textures' in its own useMemo() Hook.","The 'textures' array makes the dependencies of useMemo Hook (at line 61) change on every render. To fix this, wrap the initialization of 'textures' in its own useMemo() Hook.","'render' is defined but never used.","'DoubleSide' is defined but never used.","'BackSide' is defined but never used.","The 'textures' array makes the dependencies of useMemo Hook (at line 87) change on every render. To fix this, wrap the initialization of 'textures' in its own useMemo() Hook.","The 'textures' array makes the dependencies of useMemo Hook (at line 67) change on every render. To fix this, wrap the initialization of 'textures' in its own useMemo() Hook.","'useUpdate' is defined but never used.","'ballTexture' is assigned a value but never used.","'useLoader' is defined but never used.","'TextureLoader' is defined but never used.","'RepeatWrapping' is defined but never used.","no-redeclare","'spritey' is already defined.","redeclared","'pos' is assigned a value but never used.","'useResource' is defined but never used.","'SpriteMaterial' is defined but never used.","'Vector3' is defined but never used.","'Raycaster' is defined but never used.","React Hook useEffect has a missing dependency: 'count'. Either include it or remove the dependency array. You can also do a functional update 'setCount(c => ...)' if you only need 'count' in the 'setCount' call.",["323"],"no-global-assign","no-unsafe-negation",{"desc":"324","fix":"325"},[2888,2899],"",{"desc":"326","fix":"327"},{"desc":"328","fix":"329"},{"desc":"330","fix":"331"},{"desc":"332","fix":"333"},"Update the dependencies array to be: [size, setDefaultCamera, near, far, OnCameraInit]",{"range":"334","text":"335"},"Update the dependencies array to be: [groupParent, starShape, extrusionSettings, multiMaterial]",{"range":"336","text":"337"},"Update the dependencies array to be: [props.nrOfFaces]",{"range":"338","text":"339"},"Update the dependencies array to be: []",{"range":"340","text":"341"},"Update the dependencies array to be: [count, raycastable]",{"range":"342","text":"343"},[513,548],"[size, setDefaultCamera, near, far, OnCameraInit]",[2237,2280],"[groupParent, starShape, extrusionSettings, multiMaterial]",[3473,3497],"[props.nrOfFaces]",[4932,4939],"[]",[3706,3719],"[count, raycastable]"]